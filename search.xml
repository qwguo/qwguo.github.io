<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>console控制台输出语法使用</title>
      <link href="/2020/04/22/JavaScript/console/"/>
      <url>/2020/04/22/JavaScript/console/</url>
      
        <content type="html"><![CDATA[<h1 id="console使用"><a href="#console使用" class="headerlink" title="console使用"></a>console使用</h1><blockquote><p>我们在开发过程中经常会用到浏览器的控制台工具，来打印一些信息便于我们开发和调试，console对象为我们提供了很多的方法，能够使我们美化格式化打印的信息，对我们调试有所帮助。</p></blockquote><h2 id="console方法"><a href="#console方法" class="headerlink" title="console方法"></a>console方法</h2><h3 id="log"><a href="#log" class="headerlink" title="log()"></a>log()</h3><blockquote><p><code>log()</code>：方法是我们最常用的方法，他是直接在控制台打印我们要显示的内容</p></blockquote><p><strong>基本语法：</strong></p><pre><code class="javascript">console.log(obj1 [, obj2, ..., objN);console.log(msg [, subst1, ..., substN);console.log(&#39;String: %s, Int: %d,Float: %f, Object: %o&#39;, str, ints, floats, obj)console.log(`temp的值为: ${temp}`)</code></pre><p><strong>参数说明：</strong></p><ol><li><code>obj1...objN</code>：一个用于输出的 JavaScript 对象列表。其中每个对象会以字符串的形式按照顺序依次输出到控制台。</li><li><code>msg</code>：站位符，可以使用<code>console</code>提供的占位符来用后边的<code>substr1</code>参数进行替换。</li><li><code>subst1...substN</code>：用于替换占位符的javascript对象</li></ol><p><strong>案例：</strong></p><pre><code class="javascript">// 单个输出var a = &#39;这是一个消息&#39;;console.log(a); // 这是一个消息// 多个元素输出console.log(1, 2, 3); // 1 2 3// 使用占位符输出console.log(&#39;%d + %d = %d&#39;,1,2,3);  // 1 + 2 = 3// 使用不同类型的占位符var str = &quot;这是字符串&quot;;var ints = 40;var floats = 3.3;var obj = {a: 10, b: 20, c:[1, 3, 4], d:{x:10, y:10}};console.log(&#39;String: %s, Int: %d,Float: %f, Object: %o&#39;, str, ints, floats, obj);//String: 这是字符串, Int: 40,Float: 3.300000, Object: Object { a: 10, b: 20, c: (3) […], d: {…} }// 使用ES6的模版语法var temp = &#39;&lt;div&gt;这是一个div元素&lt;/div&gt;&#39;;console.log(`temp的值为: ${temp}`);</code></pre><h3 id="assert"><a href="#assert" class="headerlink" title="assert()"></a>assert()</h3><blockquote><p><code>assert()</code>：判断第一个参数的真假，<code>true</code> 不做任何处理，<code>false</code> 的话抛出异常并且在控制台输出相应信息，消息以红色警告的形式输出。</p></blockquote><p><strong>基本语法：</strong></p><pre><code class="javascript">console.assert(assertion, obj1 [, obj2, ..., objN]);console.assert(assertion, msg [, subst1, ..., substN]);</code></pre><p><strong>参数说明：</strong></p><ol><li><code>assertion</code>：一个布尔表达式。如果assertion为假，消息将会被输出到控制台之中。</li><li><code>obj1...objN</code>：被用来输出的Javascript对象列表，可以是一个或者多个用逗号分开。</li><li><code>msg</code>：站位符，可以使用<code>console</code>提供的占位符来用后边的<code>substr1</code>参数进行替换。</li><li><code>subst1...substN</code>：用于替换占位符的javascript对象</li></ol><p><strong>案例：</strong></p><pre><code class="javascript">var a = true;console.assert(a, &#39;为真的消息不会输出&#39;); // 因为第一个参数为真所以这段不会输出var b = false;console.assert(b, &#39;为假的消息输出&#39;); // 因为第一个参数为假所以输出‘Assertion failed: 为假的消息输出’//通过占位符输出消息console.assert(b, &#39;%s%s&#39;, &#39;my&#39;, &#39;e&#39;, &#39;you&#39;);  // Assertion failed: mye you</code></pre><h3 id="clear"><a href="#clear" class="headerlink" title="clear()"></a>clear()</h3><blockquote><p><code>clear()</code>：清楚控制台的所有消息，并且输出：<code>控制台已清除。</code>的消息。需要的注意的一点是在Google Chrome浏览器的控制台中，如果用户在设置中勾选了“Preserve log”选项，console.clear()将不会起作用。</p></blockquote><p><strong>语法：</strong></p><pre><code class="javascript">console.clear();</code></pre><h3 id="count"><a href="#count" class="headerlink" title="count()"></a>count()</h3><blockquote><p><code>count()</code>：以参数为标识记录调用的次数，调用时在控制台打印标识以及调用次数。</p></blockquote><p><strong>语法：</strong></p><pre><code class="javascript">console.count([label]);</code></pre><p><strong>参数说明：</strong></p><ol><li><code>label</code>：字符串类型，可选的标识参数，如果传入，则以此标识来记录调用测试。</li></ol><p><strong>案例：</strong></p><pre><code class="javascript">/*案例1*/// 定义一个标识变量var tag = &quot;&quot;;function fun() {    // 通过标识变量来记录调用次数    console.count(tag);}// 给标识变量赋值one,然后调用fun方法tag = &quot;one&quot;;fun(); // one: 1// 更改标识变量为twotag = &quot;two&quot;;fun(); // two: 1fun(); // two: 2console.count(&quot;three&quot;); // three: 1console.count(&quot;two&quot;); // two: 3/*案例2*/var abcDom = document.getElementById(&#39;abc&#39;);for(var i in abcDom){    // 通过这种方式可以知道abcDom中能够遍历的属性和方法总个数，当然也可以用其他方法，但是这里是演示的console.count的使用    console.count(&quot;dom&quot;);    console.log(i +&#39;---&gt;&#39;+abcDom[i]);}</code></pre><p><strong>案例1打印结果：</strong><br><img src="/2020/04/22/JavaScript/console/console.count_1.png" alt="image"></p><h3 id="countReset"><a href="#countReset" class="headerlink" title="countReset()"></a>countReset()</h3><blockquote><p>重置<code>count()</code>计数器，此函数有一个可选参数 label。如果提供了参数label，此函数会重置与label关联的计数为0。如果省略了参数，此函数会重置默认的计数器为0。</p></blockquote><p><strong>语法：</strong></p><pre><code class="javascript">console.countReset([label]);</code></pre><p><strong>参数说明：</strong></p><ol><li><code>label</code>：字符串类型，用于要重置计数器的标识符。</li></ol><p><strong>案例：</strong></p><pre><code class="javascript">/*案例1*/// 定义一个标识变量var tag = &quot;&quot;;function fun() {    // 通过标识变量来记录调用次数    console.count(tag);}// 给标识变量赋值one,然后调用fun方法tag = &quot;one&quot;;fun(); // one: 1fun(); // one: 2console.countReste(&#39;one&#39;);fun(); // one: 1console.count(); // default: 1console.count(); // default: 2console.countReste();console.count(); // default: 1</code></pre><h3 id="debug"><a href="#debug" class="headerlink" title="debug()"></a>debug()</h3><blockquote><p>输出“调试”级别的消息且仅仅控制台配置为显示调试输出时才显示该消息。此方法和<code>console.log()</code>方法基本一样。</p></blockquote><p><strong>语法：</strong></p><pre><code class="javascript">console.debug(对象1 [, 对象2, ..., 对象N]);console.debug(消息[, 字符串1, ..., 字符串N]);</code></pre><h3 id="dir"><a href="#dir" class="headerlink" title="dir()"></a>dir()</h3><blockquote><p>在控制台中显示指定JavaScript对象的属性，并通过类似文件树样式的交互列表显示。</p></blockquote><p><strong>语法：</strong></p><pre><code class="javascript">console.dir(object);</code></pre><p><strong>参数说明：</strong></p><ol><li><code>object</code>：打印出该对象的所有属性和属性值.</li></ol><p><strong>案例：</strong></p><pre><code class="javascript">var obj = {a: 10, b: 20, c:[10, 0, 30]};var arr = [10, 0, 30];/*HTML代码：&lt;div id=&quot;abc&quot;&gt;这是内容&lt;/div&gt;*/var abcDom = document.getElementById(&#39;abc&#39;);console.dir(obj); // Object  可以展开的Object形式console.dir(arr); // Array(3) 可以展开的数组形式console.dir(abcDom); // div#abc  可以展开的dom结构，包括dom所有的属性和方法</code></pre><p><strong>打印结果：</strong><br><img src="/2020/04/22/JavaScript/console/console.dir_1.png" alt="image"></p><p>可以看出<code>dir()</code>方法在打印对象数组的时候是先打印出类型，然后可以单击展开查看详细项，打印dom元素的时候打印出元素的所有属性和方法</p><h3 id="dirxml"><a href="#dirxml" class="headerlink" title="dirxml()"></a>dirxml()</h3><blockquote><p>显示一个明确的XML/HTML元素的包括所有后代元素的交互树。 如果无法作为一个element被显示，那么会以JavaScript对象的形式作为替代。 它的输出是一个继承的扩展的节点列表，可以让你看到子节点的内容。 <em>经过测试和console.log()输出基本相同</em>。</p></blockquote><p><strong>语法：</strong></p><pre><code class="javascript">console.dirxml(object);</code></pre><p><strong>参数说明：</strong></p><ol><li><code>object</code>：一个属性将被输出的JavaScript对象。</li></ol><h3 id="error-orexception"><a href="#error-orexception" class="headerlink" title="error()orexception()"></a>error()<code>or</code>exception()</h3><blockquote><p>向 Web 控制台输出一条错误消息，exception是error的别名它们功能相同。 <em>经过测试和console.log()输出相同，只是以淡红色背景警告的形式输出</em></p></blockquote><p><strong>语法：</strong></p><pre><code class="javascript">console.error(obj1 [, obj2, ..., objN]);console.error(msg [, subst1, ..., substN]);console.exception(obj1 [, obj2, ..., objN]);console.exception(msg [, subst1, ..., substN]);</code></pre><p><strong>参数说明：</strong></p><ol><li><code>obj1...objN</code>：一个用于输出的 JavaScript 对象列表。其中每个对象会以字符串的形式按照顺序依次输出到控制台。</li><li><code>msg</code>：站位符，可以使用<code>console</code>提供的占位符来用后边的<code>substr1</code>参数进行替换。</li><li><code>subst1...substN</code>：用于替换占位符的javascript对象</li></ol><h3 id="group"><a href="#group" class="headerlink" title="group()"></a>group()</h3><blockquote><p>在 Web控制台上创建一个新的分组.随后输出到控制台上的内容都会被添加一个缩进,表示该内容属于当前分组,直到调用console.groupEnd()之后,当前分组结束.</p></blockquote><p><strong>语法：</strong></p><pre><code class="javascript">console.group();</code></pre><p><strong>案例：</strong></p><pre><code class="javascript">// 定义一个分组console.group();// 后边的输出都会在这个分组内，并且有缩进，同时分组可以折叠起来console.error(obj);console.error(abcDom);console.log(obj);console.log(abcDom);</code></pre><h3 id="groupCollapsed"><a href="#groupCollapsed" class="headerlink" title="groupCollapsed()"></a>groupCollapsed()</h3><blockquote><p>在 Web控制台上创建一个新的分组.随后输出到控制台上的内容都会被添加一个缩进,表示该内容属于当前分组,直到调用console.groupEnd() 之后,当前分组结束.和 console.group()方法的不同点是,新建的分组默认是折叠的.用户必须点击一个按钮才能将折叠的内容打开.</p></blockquote><p><strong>语法：</strong></p><pre><code class="javascript">console.groupCollapsed();</code></pre><h3 id="groupEnd"><a href="#groupEnd" class="headerlink" title="groupEnd()"></a>groupEnd()</h3><blockquote><p>在 Web控制台中退出一格缩进(结束分组). 请参阅 console 中的Using groups in the console 来获取它的用法和示例.</p></blockquote><p><strong>语法：</strong></p><pre><code class="javascript">console.groupEnd();</code></pre><p><strong>综合案例：</strong></p><pre><code class="javascript">console.log(&quot;This is the outer level&quot;);// 开始最外层分组console.group(&quot;First group&quot;);console.log(&quot;In the first group&quot;);// 开始第二级分组console.group(&quot;Second group&quot;);console.log(&quot;In the second group&quot;);console.warn(&quot;Still in the second group&quot;);// 结束第二级分组console.groupEnd();console.log(&quot;Back to the first group&quot;);// 结束最外层分组console.groupEnd();console.debug(&quot;Back to the outer level&quot;);// 初始化合并的组console.groupCollapsed(&quot;First groupCollapsed&quot;);console.log(&quot;first child&quot;);console.log(&quot;second child&quot;);console.groupEnd();</code></pre><p><img src="/2020/04/22/JavaScript/console/console.group_1.png" alt="image"></p><h3 id="profile"><a href="#profile" class="headerlink" title="profile()"></a>profile()</h3><h3 id="table"><a href="#table" class="headerlink" title="table()"></a>table()</h3><blockquote><p>将数据以表格的形式显示。<br>这个方法需要一个必须参数 data，data 必须是一个数组或者是一个对象；还可以使用一个可选参数 columns。<br>它会把数据 data 以表格的形式打印出来。数组中的每一个元素（或对象中可枚举的属性）将会以行的形式显示在表格中。<br>表格的第一列是 index。如果数据 data 是一个数组，那么这一列的单元格的值就是数组的索引。 如果数据是一个对象，那么它们的值就是各对象的属性名称。 注意（在 FireFox 中）console.table 被限制为只显示1000行（第一行是被标记的索引。</p></blockquote><p><strong>语法：</strong></p><pre><code class="javascript">console.table(data [, columns]);</code></pre><p><strong>参数说明：</strong></p><ol><li><code>data</code>：要显示的数据。必须是数组或对象。</li><li><code>columns</code>：一个包含列的名称的数组。</li></ol><p><strong>案例：</strong></p><pre><code class="JavaScript">// 打印数组console.table([&quot;apples&quot;, &quot;oranges&quot;, &quot;bananas&quot;]);</code></pre><p><img src="/2020/04/22/JavaScript/console/console.table_1.png" alt="image"></p><pre><code class="JavaScript">// 打印对象console.table({&quot;apples&quot;:&quot;苹果&quot;, &quot;oranges&quot;:&quot;橙子&quot;, &quot;bananas&quot;:&quot;香蕉&quot;});</code></pre><p><img src="/2020/04/22/JavaScript/console/console.table_2.png" alt="image"></p><pre><code class="JavaScript">// 打印多维数组console.table([[&quot;apples&quot;,&quot;苹果&quot;], [&quot;oranges&quot;,&quot;橙子&quot;], [&quot;bananas&quot;,&quot;香蕉&quot;]]);</code></pre><p><img src="/2020/04/22/JavaScript/console/console.table_3.png" alt="image"></p><pre><code class="JavaScript">// 打印多维数组var obj = {fruit:{&quot;apples&quot;:&quot;苹果&quot;, &quot;oranges&quot;:&quot;橙子&quot;, &quot;bananas&quot;:&quot;香蕉&quot;, &quot;pair&quot;:&quot;梨&quot;}, greens: {&quot;cucumber&quot;:&quot;黄瓜&quot;, &quot;spinage&quot;:&quot;菠菜&quot;, &quot;potato&quot;:&quot;马铃薯&quot;}}console.table(obj);</code></pre><p><img src="/2020/04/22/JavaScript/console/console.table_4.png" alt="image"></p><h3 id="tim"><a href="#tim" class="headerlink" title="tim()"></a>tim()</h3><blockquote><p>启动一个计时器来跟踪某一个操作的占用时长。每一个计时器必须拥有唯一的名字，页面中最多能同时运行10,000个计时器。当以此计时器名字为参数调用 console.timeEnd() 时，浏览器将以毫秒为单位，输出对应计时器所经过的时间。</p></blockquote><p><strong>语法：</strong></p><pre><code class="JavaScript">console.time(timerName);</code></pre><p><strong>参数说明：</strong></p><ol><li><code>timerName</code>：新计时器的名字。 用来标记这个计时器，作为参数调用 <code>console.timeEnd()</code> 可以停止计时并将经过的时间在终端中打印出来.</li></ol><h3 id="timeEnd"><a href="#timeEnd" class="headerlink" title="timeEnd()"></a>timeEnd()</h3><blockquote><p>停止一个通过 <code>console.time()</code> 启动的计时器</p></blockquote><p><strong>语法：</strong></p><pre><code class="JavaScript">console.timeEnd(label);</code></pre><p><strong>参数说明：</strong></p><ol><li><code>label</code>：需要停止的计时器名字。一旦停止，计时器所经过的时间会被自动输出到控制台。</li></ol><p><strong>案例展示：</strong></p><pre><code class="JavaScript">// 不传参数，开启一个默认default标识计数器console.time();for(var i=0;i&lt;1000000;i++){    var j=i*i;}// 不传参数，停止一个默认default标识计数器console.timeEnd();// 传参数，开启一个myTime参数的标识计数器var myTime = &#39;myTime&#39;;console.time(myTime);for(var i=0;i&lt;1000000;i++){    var j=i*i;}// 传入要停止的参数，停止myTime标识计数器console.timeEnd(myTime);</code></pre><p><img src="/2020/04/22/JavaScript/console/console.time_1.png" alt="image"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>通过css3的scrollbar功能自定义浏览器的滚动条效果</title>
      <link href="/2020/04/16/CSS3/scrollbar/"/>
      <url>/2020/04/16/CSS3/scrollbar/</url>
      
        <content type="html"><![CDATA[<h1 id="scrollbar"><a href="#scrollbar" class="headerlink" title="scrollbar"></a>scrollbar</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>cropper.js 图片处理插件</title>
      <link href="/2020/03/26/jQuery/plugins/cropper/"/>
      <url>/2020/03/26/jQuery/plugins/cropper/</url>
      
        <content type="html"><![CDATA[<h1 id="图片剪裁插件Image-Cropper使用方法"><a href="#图片剪裁插件Image-Cropper使用方法" class="headerlink" title="图片剪裁插件Image Cropper使用方法"></a>图片剪裁插件Image Cropper使用方法</h1><blockquote><p>cropper是一款使用简单且功能强大的图片剪裁jQuery插件。该图片剪裁插件支持图片放大缩小，支持鼠标滚轮操作，支持图片旋转，支持触摸屏设备，支持canvas，并且支持跨浏览器使用。</p><ul><li>支持Promise API。</li><li>支持移动触摸事件。</li><li>基于canvas技术，支持canvas的浏览器都可以使用该插件。</li><li>通过Base64编码导出剪裁后的图片。</li><li>可以通过json数据来获取图片的位置和大小。</li><li>可以通过json数据来设置图片的位置和大小。</li><li>可以通过URL来获取图片。</li></ul></blockquote><h2 id="下载使用"><a href="#下载使用" class="headerlink" title="下载使用"></a>下载使用</h2><h3 id="网站"><a href="#网站" class="headerlink" title="网站"></a>网站</h3><ul><li>官网：<a href="https://github.com/fengyuanchen/cropper" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/fengyuanchen/cropper</a></li><li>演示地址：<a href="https://fengyuanchen.github.io/cropper/" rel="external nofollow noopener noreferrer" target="_blank">https://fengyuanchen.github.io/cropper/</a></li><li>衍生产品-<em>Photo Editor</em>：<a href="https://fengyuanchen.github.io/photo-editor/" rel="external nofollow noopener noreferrer" target="_blank">https://fengyuanchen.github.io/photo-editor/</a></li></ul><h3 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h3><pre><code class="shell"># 可以使用npm下载npm install cropper jquery# 通过bower安装$ bower install cropper jquery# 通过yarn安装$ yarn add cropper jquery</code></pre><h3 id="引入文件"><a href="#引入文件" class="headerlink" title="引入文件"></a>引入文件</h3><pre><code class="html">&lt;!-- 引入css样式 --&gt;&lt;link  href=&quot;cropper.css&quot; rel=&quot;stylesheet&quot;&gt;&lt;!-- 引入js文件 --&gt;&lt;script src=&quot;jquery.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;cropper.js&quot;&gt;&lt;/script&gt;</code></pre><h3 id="构建html"><a href="#构建html" class="headerlink" title="构建html"></a>构建html</h3><pre><code class="html">&lt;!-- 可以将图片或canvas直接包裹到一个块级元素中 --&gt;&lt;div class=&quot;container&quot;&gt;  &lt;img id=&quot;image&quot; src=&quot;picture.jpg&quot;&gt;&lt;/div&gt;</code></pre><h3 id="设置样式"><a href="#设置样式" class="headerlink" title="设置样式"></a>设置样式</h3><pre><code class="css">/* 给container元素设置宽高 并且限制图片的宽避免图片溢出容器 */.container{  width: 500px;  height: 500px;}.container img {  max-width: 100%;}</code></pre><h3 id="初始化插件。"><a href="#初始化插件。" class="headerlink" title="初始化插件。"></a>初始化插件。</h3><pre><code class="javascript">// jquery获取元素var $image = $(&#39;#image&#39;);// 通过jquery Dom 的cropper方法初始化$image.cropper({  aspectRatio: 16 / 9,  crop: function(event) {    console.log(event.detail.x);    console.log(event.detail.y);    console.log(event.detail.width);    console.log(event.detail.height);    console.log(event.detail.rotate);    console.log(event.detail.scaleX);    console.log(event.detail.scaleY);  }});// 可以通过Dom对象的data的cropper属性获取初始化后获取Cropper.js实例var cropper = $image.data(&#39;cropper&#39;);</code></pre><h2 id="详细说明"><a href="#详细说明" class="headerlink" title="详细说明"></a>详细说明</h2><h3 id="参数-options"><a href="#参数-options" class="headerlink" title="参数(options)"></a>参数(options)</h3><blockquote><p>在调用cropper方法的时候我们可以传递可选的参数选项options，也可以通过setDefaults(options)设置选项，cropper支持39个可选属性</p></blockquote><pre><code class="javascript">$(&#39;img&#39;).cropper(options);// or// 设置全局cropper属性$.fn.cropper.setDefaults(options)// 参数项说明options = {  viewMode: 0,  dragMode: DRAG_MODE_CROP,  initialAspectRatio: NaN,  aspectRatio: NaN,  data: null,  preview: &#39;&#39;,  responsive: true,  restore: true,  checkCrossOrigin: true,  checkOrientation: true,  modal: true,  guides: true,  center: true,  highlight: true,  background: true,  autoCrop: true,  autoCropArea: 0.8,  movable: true,  rotatable: true,  scalable: true,  zoomable: true,  zoomOnTouch: true,  zoomOnWheel: true,  wheelZoomRatio: 0.1,  cropBoxMovable: true,  cropBoxResizable: true,  toggleDragModeOnDblclick: true,  minCanvasWidth: 0,  minCanvasHeight: 0,  minCropBoxWidth: 0,  minCropBoxHeight: 0,  minContainerWidth: 200,  minContainerHeight: 100,  ready: null,  cropstart: null,  cropmove: null,  cropend: null,  crop: null,  zoom: null}</code></pre><h4 id="viewMode"><a href="#viewMode" class="headerlink" title="viewMode"></a>viewMode</h4><blockquote><p> 定义裁切器的查看模式。如果设置<code>viewMode</code>为<code>0</code>，裁切框可以画布外的延伸，而设置值<code>1</code>，<code>2</code>或<code>3</code>将限制裁切框画布的大小。将<code>viewMode</code>设置成<code>2</code>或<code>3</code>将限制画布大小不超过容器大小。请注意，如果画布和容器的比例相同，则<code>2</code>和<code>3</code>之间没有区别。</p></blockquote><ul><li>类型： <code>Number</code></li><li>默认： <code>0</code></li><li>选项：<ul><li>0：无限制</li><li>1：限制裁切框不要超过图片的大小, 图片可以小于容器框。</li><li>2：限制裁切框不能超出图片的范围，且图片填充模式为 cover 最长边填充满容器，有短边填充不满的情况</li><li>3：限制裁切框不能超出图片的范围，且图片填充模式为 contain 最短边填充，最短边填充，有长边超出的现象</li></ul></li></ul><table><thead><tr><th>0</th><th>1</th><th>2</th><th>3</th></tr></thead><tbody><tr><td><img src="/2020/03/26/jQuery/plugins/cropper/viewMode_0.jpg" alt="image"></td><td><img src="/2020/03/26/jQuery/plugins/cropper/viewMode_1.jpg" alt="image"></td><td><img src="/2020/03/26/jQuery/plugins/cropper/viewMode_2.jpg" alt="image"></td><td><img src="/2020/03/26/jQuery/plugins/cropper/viewMode_3.jpg" alt="image"></td></tr></tbody></table><h4 id="dragMode"><a href="#dragMode" class="headerlink" title="dragMode"></a>dragMode</h4><blockquote><p>定义裁切器的拖动模式</p></blockquote><ul><li>类型： <code>string</code></li><li>默认：<code>crop</code></li><li>选项：<ul><li><code>crop</code>：创建一个新的裁切框, 图片不能移动</li><li><code>move</code>：不从新创建裁切框，可以拖动图片位置，这个时候需要确保<code>movable</code>属性设置为<code>true</code></li><li><code>none</code>：不从新创建裁切框，也不能拖动图片</li></ul></li></ul><h4 id="initialAspectRatio"><a href="#initialAspectRatio" class="headerlink" title="initialAspectRatio"></a>initialAspectRatio</h4><blockquote><p>定义裁切框的初始宽高比。默认情况下，它与画布（图像包装器）的纵横比相同。<em>这个值只有在<code>aspectRatio</code>值不进行设置的时候生效</em></p></blockquote><ul><li>类型： <code>Number</code> <em>可以是数字，或者数学计算公式如16/9、4/3</em></li><li>默认： <code>NaN</code></li></ul><h4 id="aspectRatio"><a href="#aspectRatio" class="headerlink" title="aspectRatio"></a>aspectRatio</h4><blockquote><p>定义裁切框的可拖动的长宽比。默认情况下是自由拖动，设置后将按照设置比例缩放大小</p></blockquote><ul><li>类型： <code>Number</code> <em>可以是数字，或者数学计算公式如16/9、4/3</em></li><li>默认： <code>NaN</code> 自由比例</li></ul><h4 id="data"><a href="#data" class="headerlink" title="data"></a>data</h4><blockquote><p>定义初始化裁切框的位置，大小等信息</p></blockquote><ul><li>类型：<code>object</code></li><li>默认：’’</li></ul><h4 id="preview"><a href="#preview" class="headerlink" title="preview"></a>preview</h4><blockquote><p>指定额外的dom元素（容器）以进行选择区域预览效果，元素或元素数组或节点列表对象或Document.querySelectorAll的有效选择器。</p></blockquote><ul><li>类型： <code>Element</code>：dom元素、<code>Array</code>：多个dom元素的数组形式，<code>nodeList</code>：dom列表，<code>String</code> dom的选择器，可以是<code>#id</code>、<code>.class</code>、<code>标签名</code>等</li><li>默认： <code>&#39;&#39;</code> 没有任何元素</li><li>注意：<ul><li>一定要设置元素的宽度和高度。</li><li>如果设置了<code>aspectRatio</code>属性的话最好按照这个比例设置宽高。</li><li>并且给元素设置<code>overflow:hidden</code>让元素多余截取隐藏</li></ul></li></ul><p>效果展示：可以同时添加多个预览元素<br><img src="/2020/03/26/jQuery/plugins/cropper/preview.jpg" alt="image"></p><h4 id="responsive"><a href="#responsive" class="headerlink" title="responsive"></a>responsive</h4><blockquote><p>在调整窗口大小的时候是否重新渲染裁切区域</p></blockquote><ul><li>类型：<code>Boolean</code></li><li>默认：<code>true</code></li></ul><h4 id="restore"><a href="#restore" class="headerlink" title="restore"></a>restore</h4><blockquote><p>在调整完窗口大小后，恢复裁切区域</p></blockquote><ul><li>类型：<code>Boolean</code></li><li>默认：<code>true</code></li></ul><h4 id="checkCrossOrigin"><a href="#checkCrossOrigin" class="headerlink" title="checkCrossOrigin"></a>checkCrossOrigin</h4><blockquote><p>检查当前图像是否是跨源图像。<br>如果是这样，则在克隆图像时，crossOrigin会将属性添加到克隆的图像元素，<em>并将时间戳添加到该src属性以重新加载源图像，以避免浏览器缓存错误</em>。<br>通过向crossOrigin图像元素添加属性将停止向图像URL添加时间戳并停止重新加载图像，但是读取图像数据以进行方向检查的请求（XMLHttpRequest）将需要一个时间戳来破坏缓存，以免现在浏览器缓存出错，您可以设置取消此请求的checkOrientation选项false。<br>如果图像的crossOrigin属性值为”use-credentials”，则当XMLHttpRequest读取图像数据时，该withCredentials属性将设置为true。。</p></blockquote><ul><li>类型：<code>Boolean</code></li><li>默认：<code>true</code></li></ul><h4 id="checkOrientation"><a href="#checkOrientation" class="headerlink" title="checkOrientation"></a>checkOrientation</h4><blockquote><p>检查当前图像的Exif方向信息。请注意，只有JPEG图像可以包含Exif方向信息。用于在旋转或翻转图像时做一些处理，以避免在iOS设备上一些问题。<br>此属性需要同时将<code>rotatable</code>和<code>scalable</code>选项设置为<code>true</code>才生效。</p></blockquote><ul><li>类型：<code>Boolean</code></li><li>默认：<code>true</code></li></ul><h4 id="modal"><a href="#modal" class="headerlink" title="modal"></a>modal</h4><blockquote><p>是否在裁切框的下方显示半透明的黑色遮罩。<em>当设置为<code>false</code>遮罩的dom元素是一直显示的只是把元素设置成透明</em></p></blockquote><ul><li>类型：<code>Boolean</code></li><li>默认：<code>true</code></li></ul><table><thead><tr><th>true</th><th>false</th></tr></thead><tbody><tr><td><img src="/2020/03/26/jQuery/plugins/cropper/modal_true.jpg" alt="image"></td><td><img src="/2020/03/26/jQuery/plugins/cropper/modal_false.jpg" alt="image"></td></tr></tbody></table><h4 id="guides"><a href="#guides" class="headerlink" title="guides"></a>guides</h4><blockquote><p>在裁切框中是否显示网格</p></blockquote><ul><li>类型：<code>Boolean</code></li><li>默认：<code>true</code></li></ul><table><thead><tr><th>true</th><th>false</th></tr></thead><tbody><tr><td><img src="/2020/03/26/jQuery/plugins/cropper/guides_true.jpg" alt="image"></td><td><img src="/2020/03/26/jQuery/plugins/cropper/guides_false.jpg" alt="image"></td></tr></tbody></table><h4 id="center"><a href="#center" class="headerlink" title="center"></a>center</h4><blockquote><p>在裁切框中是否显示中心控制器，也就是中间的小加号</p></blockquote><ul><li>类型：<code>Boolean</code></li><li>默认：<code>true</code></li></ul><table><thead><tr><th>true</th><th>false</th></tr></thead><tbody><tr><td><img src="/2020/03/26/jQuery/plugins/cropper/center_true.jpg" alt="image"></td><td><img src="/2020/03/26/jQuery/plugins/cropper/center_false.jpg" alt="image"></td></tr></tbody></table><h4 id="highlight"><a href="#highlight" class="headerlink" title="highlight"></a>highlight</h4><blockquote><p>是否高亮显示裁切框中的图片，查看源码后发现，也就是在上边添加了一个白色背景的dom元素，并且透明度设置为0.1看上去有点变亮的感觉</p></blockquote><ul><li>类型：<code>Boolean</code></li><li>默认：<code>true</code></li></ul><table><thead><tr><th>true</th><th>false</th></tr></thead><tbody><tr><td><img src="/2020/03/26/jQuery/plugins/cropper/highlight_true.jpg" alt="image"></td><td><img src="/2020/03/26/jQuery/plugins/cropper/highlight_false.jpg" alt="image"></td></tr></tbody></table><h4 id="background"><a href="#background" class="headerlink" title="background"></a>background</h4><blockquote><p>是否显示容器的网格背景，这个在<code>viewMode</code>模式设置成非3时可以看到效果</p></blockquote><ul><li>类型：<code>Boolean</code></li><li>默认：<code>true</code></li></ul><table><thead><tr><th>true</th><th>false</th></tr></thead><tbody><tr><td><img src="/2020/03/26/jQuery/plugins/cropper/background_true.jpg" alt="image"></td><td><img src="/2020/03/26/jQuery/plugins/cropper/background_false.jpg" alt="image"></td></tr></tbody></table><h4 id="autoCrop"><a href="#autoCrop" class="headerlink" title="autoCrop"></a>autoCrop</h4><blockquote><p>是否自动创建裁切框，默认自动创建，如果有<code>data</code>属性按照<code>data</code>给定的数据创建，如果没有，按照图片的宽高比创建合适的裁切框<br>如果设置<code>false</code>, 不自动创建，在<code>dragMode</code>属性设置为：<code>crop</code>的情况下可以拖动创建裁切框，其他值不能拖动创建</p></blockquote><ul><li>类型：<code>Boolean</code></li><li>默认：<code>true</code></li></ul><h4 id="autoCropArea"><a href="#autoCropArea" class="headerlink" title="autoCropArea"></a>autoCropArea</h4><blockquote><p>定义自动裁切区域的大小，取0到1之间的数字。（百分比）。</p></blockquote><ul><li>类型：<code>Number</code></li><li>默认：<code>0.8</code>(取图像的80%)</li></ul><h4 id="movable"><a href="#movable" class="headerlink" title="movable"></a>movable</h4><blockquote><p>定义图片是否可以拖动移动</p></blockquote><ul><li>类型：<code>Boolean</code></li><li>默认：<code>true</code></li></ul><h4 id="rotatable"><a href="#rotatable" class="headerlink" title="rotatable"></a>rotatable</h4><blockquote><p>是否开启图片旋转功能，默认开启</p></blockquote><ul><li>类型: <code>Boolean</code></li><li>默认: <code>true</code></li></ul><h4 id="scalable"><a href="#scalable" class="headerlink" title="scalable"></a>scalable</h4><blockquote><p>是否开启图片缩放功能，默认开启</p></blockquote><ul><li>类型: <code>Boolean</code></li><li>默认: <code>true</code></li></ul><h4 id="zoomable"><a href="#zoomable" class="headerlink" title="zoomable"></a>zoomable</h4><blockquote><p>是否开启图片可缩放功能，默认开启，如果关闭后，鼠标滚轮，和触摸放大缩小将不可用</p></blockquote><ul><li>类型: <code>Boolean</code></li><li>默认: <code>true</code></li></ul><h4 id="zoomOnWheel"><a href="#zoomOnWheel" class="headerlink" title="zoomOnWheel"></a>zoomOnWheel</h4><blockquote><p>是否开启通过鼠标滚轮缩放图片功能，默认开启，需要在<code>zoomable</code>属性设置为<code>true</code>情况下才可用</p></blockquote><ul><li>类型: <code>Boolean</code></li><li>默认: <code>true</code></li></ul><h4 id="zoomOnTouch"><a href="#zoomOnTouch" class="headerlink" title="zoomOnTouch"></a>zoomOnTouch</h4><blockquote><p>是否开启通过拖动触摸缩放图片功能，默认开启，需要在<code>zoomable</code>属性设置为<code>true</code>情况下才可用</p></blockquote><ul><li>类型: <code>Boolean</code></li><li>默认: <code>true</code></li></ul><h4 id="wheelZoomRatio"><a href="#wheelZoomRatio" class="headerlink" title="wheelZoomRatio"></a>wheelZoomRatio</h4><blockquote><p>定义使用鼠标滚轮缩放的时候缩放的比例值，默认是<code>0.1</code>，表示滚动滑轮一下缩小或放大图片的<code>10%</code></p></blockquote><ul><li>类型: <code>Number</code></li><li>默认: <code>0.1</code></li></ul><h4 id="cropBoxMovable"><a href="#cropBoxMovable" class="headerlink" title="cropBoxMovable"></a>cropBoxMovable</h4><blockquote><p>是否开启裁切框可拖动，默认开启表示可以移动裁切框</p></blockquote><ul><li>类型: <code>Boolean</code></li><li>默认: <code>true</code></li></ul><h4 id="cropBoxResizable"><a href="#cropBoxResizable" class="headerlink" title="cropBoxResizable"></a>cropBoxResizable</h4><blockquote><p>是否开启裁切框可调整大小，默认开启表示可以调整裁切框大小，如果设置为<code>false</code>将不显示可拖动缩放句柄</p></blockquote><ul><li>类型: <code>Boolean</code></li><li>默认: <code>true</code></li></ul><h4 id="toggleDragModeOnDblclick"><a href="#toggleDragModeOnDblclick" class="headerlink" title="toggleDragModeOnDblclick"></a>toggleDragModeOnDblclick</h4><blockquote><p>是否开启双击裁切框后可以从新创建裁切框功能，如果设置为<code>true</code>表示开启，可以双击裁切框后，在图片上拖动从新创建新的裁切框，再次双击关闭。</p></blockquote><ul><li>类型: <code>Boolean</code></li><li>默认: <code>true</code></li></ul><h4 id="minContainerWidth"><a href="#minContainerWidth" class="headerlink" title="minContainerWidth"></a>minContainerWidth</h4><blockquote><p>表示默认容器的最小宽度，默认最小宽度是200像素。</p></blockquote><ul><li>类型: <code>Number</code></li><li>默认: <code>200</code></li></ul><h4 id="minContainerWidth-1"><a href="#minContainerWidth-1" class="headerlink" title="minContainerWidth"></a>minContainerWidth</h4><blockquote><p>表示默认容器的最小高度，默认最小宽度是100像素。</p></blockquote><ul><li>类型: <code>Number</code></li><li>默认: <code>100</code></li></ul><h4 id="minCanvasWidth"><a href="#minCanvasWidth" class="headerlink" title="minCanvasWidth"></a>minCanvasWidth</h4><blockquote><p>表示默认画布（图片容器）的最小宽度，默认最小宽度是0像素。</p></blockquote><ul><li>类型: <code>Number</code></li><li>默认: <code>0</code></li></ul><h4 id="minCanvasHeight"><a href="#minCanvasHeight" class="headerlink" title="minCanvasHeight"></a>minCanvasHeight</h4><blockquote><p>表示默认画布（图片容器）的最小高度，默认最小高度是0像素。可以大于容器高度</p></blockquote><ul><li>类型: <code>Number</code></li><li>默认: <code>0</code></li></ul><h4 id="minCropBoxHeight"><a href="#minCropBoxHeight" class="headerlink" title="minCropBoxHeight"></a>minCropBoxHeight</h4><blockquote><p>表示可改变裁切框的最小高度，默认最小高度是0像素。当设置了<code>aspectRatio</code>属性，应该按照此属性的比例计算高度，高度可能会小于此值</p></blockquote><ul><li>类型: <code>Number</code></li><li>默认: <code>0</code></li></ul><h4 id="minCropBoxWidth"><a href="#minCropBoxWidth" class="headerlink" title="minCropBoxWidth"></a>minCropBoxWidth</h4><blockquote><p>表示默认裁切框的最小宽度，默认最小宽度是0像素。当设置了<code>aspectRatio</code>属性，应该按照此属性的比例计算宽度，宽度可能会小于此值</p></blockquote><ul><li>类型: <code>Number</code></li><li>默认: <code>0</code></li></ul><h4 id="ready"><a href="#ready" class="headerlink" title="ready"></a>ready</h4><blockquote><p>当实例化对象后触发的方法(只执行一次)</p></blockquote><ul><li>类型: <code>Function</code></li><li>默认: <code>null</code></li></ul><h4 id="cropstart"><a href="#cropstart" class="headerlink" title="cropstart"></a>cropstart</h4><blockquote><p>当裁切开始时触发的事件，包括开始创建裁切框，移动裁切框开始，移动图片开始等都会触发此方法，滚轮放大缩小图片不执行此方法</p></blockquote><ul><li>类型: <code>Function</code></li><li>默认: <code>null</code></li></ul><h4 id="cropmove"><a href="#cropmove" class="headerlink" title="cropmove"></a>cropmove</h4><blockquote><p>当裁切开始拖动时触发的事件，滚轮放大缩小图片不执行此方法</p></blockquote><ul><li>类型: <code>Function</code></li><li>默认: <code>null</code></li></ul><h4 id="cropend"><a href="#cropend" class="headerlink" title="cropend"></a>cropend</h4><blockquote><p>当裁切结束时触发的事件，就是鼠标抬起触发的事件</p></blockquote><ul><li>类型: <code>Function</code></li><li>默认: <code>null</code></li></ul><h4 id="crop"><a href="#crop" class="headerlink" title="crop"></a>crop</h4><blockquote><p>当裁切时触发的事件，包括改变裁切框大小，移动裁切框，移动图片，滚轮放大缩小图片等，都执行此方法，此方法中的的<code>event</code>参数里边包括裁切的数据</p></blockquote><ul><li>类型: <code>Function</code></li><li>默认: <code>null</code></li></ul><pre><code class="javascript">options:{  crop: function(event) {    console.log(&quot;crop-event&quot;, event);    console.log(event.detail.x);    console.log(event.detail.y);    console.log(event.detail.width);    console.log(event.detail.height);    console.log(event.detail.rotate);    console.log(event.detail.scaleX);    console.log(event.detail.scaleY);  }}</code></pre><h4 id="zoom"><a href="#zoom" class="headerlink" title="zoom"></a>zoom</h4><blockquote><p>当通过鼠标滚轮，或者触摸缩小放大图片的时候执行此方法</p></blockquote><ul><li>类型: <code>Function</code></li><li>默认: <code>null</code></li></ul><h3 id="方法-methods"><a href="#方法-methods" class="headerlink" title="方法(methods)"></a>方法(methods)</h3><blockquote><p>由于加载图像时存在异步过程，因此应在<code>ready</code>之后调用大多数方法，<code>setAspectRatio</code>，<code>replace</code>和“<code>destroy</code>除外。<br>如果方法没有被设置返回任何值，那么它会返回一个cropper的实例 因此多个方法可以使用链式写法</p></blockquote><h4 id="crop-1"><a href="#crop-1" class="headerlink" title="crop()"></a>crop()</h4><blockquote><p>手动显示裁切框，在实例化裁切器的时候我们可以先把<code>autoCrop</code>设置成<code>false</code>不显示裁切框，然后通过手动调<code>crop</code>方法来显示裁切框</p></blockquote><pre><code class="javascript">/* 两种方法手动显示裁切框 */var $image = $(&#39;#image&#39;);$image.cropper(options);// 方法一通过实例化裁切器的dom元素上一个cropper实例来调用var cropper = $image.data(&#39;cropper&#39;);cropper.crop(); //调用实例对象上的crop方法// 通过dom元素的jquery方法调用，crop是要执行的方法名，后边可以添加参数$image.cropper(&#39;crop&#39;);</code></pre><h4 id="clear"><a href="#clear" class="headerlink" title="clear()"></a>clear()</h4><blockquote><p>手动隐藏裁切框</p></blockquote><pre><code class="javascript">/* 两种方法手动移除裁切框 */var $image = $(&#39;#image&#39;);$image.cropper(options);// 方法一通过实例化裁切器的dom元素上一个cropper实例来调用var cropper = $image.data(&#39;cropper&#39;);cropper.clear(); //调用实例对象上的clear方法// 通过dom元素的jquery方法调用，clear是要执行的方法名，后边可以添加参数$image.cropper(&#39;clear&#39;);</code></pre><h4 id="reset"><a href="#reset" class="headerlink" title="reset()"></a>reset()</h4><blockquote><p>重置裁切框，从新初始化裁切框</p></blockquote><pre><code class="javascript">/* 两种方法手动初始化裁切框 */var $image = $(&#39;#image&#39;);$image.cropper(options);// 方法一通过实例化裁切器的dom元素上一个cropper实例来调用var cropper = $image.data(&#39;cropper&#39;);cropper.reset(); //调用实例对象上的reset方法// 通过dom元素的jquery方法调用，reset是要执行的方法名，后边可以添加参数$image.cropper(&#39;reset&#39;);</code></pre><h4 id="replace-url-hasSameSize"><a href="#replace-url-hasSameSize" class="headerlink" title="replace(url[, hasSameSize])"></a>replace(url[, hasSameSize])</h4><blockquote><p>从新更换裁切器的图片，替换图像的src并重建裁切器</p></blockquote><ul><li><p><code>url</code>:</p><ul><li>类型：<code>String</code></li><li>新图片的地址路径</li></ul></li><li><p><code>hasSameSize</code>:</p><blockquote><p><code>false</code>：替换图片地址，并从新创建裁切器；<code>true</code>：不重新创建裁切器只更换图片地址；<br>如果新图像的大小与旧图像的大小相同，则设置为<code>true</code>将不会重建裁切器，而只会更新所有相关图像的URL。这可以用于应用过滤器。</p></blockquote><ul><li>类型：<code>Boolean</code></li><li>默认：<code>false</code></li></ul></li></ul><pre><code class="javascript">/* 两种方法手动初始化裁切框 */var $image = $(&#39;#image&#39;);$image.cropper(options);// 方法一通过实例化裁切器的dom元素上一个cropper实例来调用var cropper = $image.data(&#39;cropper&#39;);cropper.replace(&#39;800-7.jpg&#39;); //调用实例对象上的replace方法// 通过dom元素的jquery方法调用，replace是要执行的方法名，后边可以添加参数$image.cropper(&#39;replace&#39;, &#39;800-7.jpg&#39;, true);</code></pre><h4 id="disable"><a href="#disable" class="headerlink" title="disable()"></a>disable()</h4><blockquote><p>锁定裁切器使裁切器不可用，包括裁切器的各种方法都不能用，<code>destroy()</code>方法除外。调用方式和上边方法调用方式相同。</p></blockquote><h4 id="enable"><a href="#enable" class="headerlink" title="enable()"></a>enable()</h4><blockquote><p>解除锁定裁切器使裁切器从新可用，包括裁切器的各种方法都恢复可用。</p></blockquote><h4 id="destroy"><a href="#destroy" class="headerlink" title="destroy()"></a>destroy()</h4><blockquote><p>销毁当前的裁切器，并移除所有裁切器的dom元素，只留下原始图片。销毁后所有方法不可再用。</p></blockquote><h4 id="move-offsetX-offsetY"><a href="#move-offsetX-offsetY" class="headerlink" title="move(offsetX[, offsetY])"></a>move(offsetX[, offsetY])</h4><blockquote><p>移动图片方法，调用此方法来左右，或者上下移动指定像素位。调用这个方法移动完毕后，会调用<code>crop</code>参数的方法</p></blockquote><ul><li><p><code>offsetX</code></p><blockquote><p>水平方左右移动指定大小，单位像素（px）。取正直图片向右移动，取负值图片向左移动</p></blockquote><ul><li>类型：<code>Number</code></li></ul></li><li><p><code>offsetY</code></p><blockquote><p>垂直方上下移动指定大小，单位像素（px）。取正直图片向下移动，取负值图片向上移动</p></blockquote><ul><li>类型：<code>Number</code></li></ul></li></ul><h4 id="moveTo-x-y"><a href="#moveTo-x-y" class="headerlink" title="moveTo(x[, y])"></a>moveTo(x[, y])</h4><blockquote><p>移动图片到指定位置，调用此方法来左右，或者上下移动图片到指定位置，调用这个方法移动完毕后，会调用<code>crop</code>参数的方法</p></blockquote><ul><li><p><code>x</code></p><blockquote><p>水平方左右移动图片到指定位置，单位像素（px）。取正直图片向右移动，取负值图片向左移动</p></blockquote><ul><li>类型：<code>Number</code></li></ul></li><li><p><code>y</code></p><blockquote><p>垂直方上下移动图片到指定位置，单位像素（px）。取正直图片向下移动，取负值图片向上移动</p></blockquote><ul><li>类型：<code>Number</code></li></ul></li></ul><h4 id="zoom-ratio"><a href="#zoom-ratio" class="headerlink" title="zoom(ratio)"></a>zoom(ratio)</h4><blockquote><p>图片缩放比。调用这个方法缩放完毕后，会调用<code>crop</code>参数的方法，和<code>zoom</code>参数的方法</p></blockquote><ul><li><p><code>ratio</code></p><blockquote><p>图片的缩放比例，-1 - 0 - 1之间的数字取正直图片放大，取负值图片缩小</p></blockquote><ul><li>类型：<code>Number</code></li></ul></li></ul><h4 id="zoomTo-ratio-pivot"><a href="#zoomTo-ratio-pivot" class="headerlink" title="zoomTo(ratio,[, pivot])"></a>zoomTo(ratio,[, pivot])</h4><blockquote><p>图片缩放到指定比例大小。调用这个方法移动完毕后，会调用<code>crop</code>参数的方法，和<code>zoom</code>参数的方法</p></blockquote><ul><li><p><code>ratio</code></p><blockquote><p>图片的缩放比例，大于0的数字，表示缩放的倍数</p></blockquote><ul><li>类型：<code>Number</code></li></ul></li><li><p><code>pivot</code></p><blockquote><p>图片缩放的时候设置的缩放中心点，基于裁切容器的左上角</p></blockquote><ul><li>类型：<code>Object</code></li><li>格式：<code>{ x: Number, y: Number }</code></li></ul></li></ul><pre><code class="javascript">/* 两种方法手动初始化裁切框 */const $image = $(&#39;#image&#39;);$image.cropper(options);// 方法一通过实例化裁切器的dom元素上一个cropper实例来调用const cropper = $image.data(&#39;cropper&#39;);const containerData = cropper.getContainerData();//获取裁切器的宽高等数据cropper.zoomTo(.5, {  // 已裁切器宽度10%的位置作为x轴坐标  // 已裁切器高度10%的位置作为y轴坐标  // 已得到的x，y作为缩放的中心点开始缩放          x: containerData.width / 10,          y: containerData.height / 10,        });// 通过dom元素的jquery方法调用，zoomTo是要执行的方法名，后边可以添加参数$image.cropper(&#39;zoomTo&#39;, .5, {          x: containerData.width / 10,          y: containerData.height / 10,        });</code></pre><h4 id="rotate-degree"><a href="#rotate-degree" class="headerlink" title="rotate(degree)"></a>rotate(degree)</h4><blockquote><p>图片旋转的方法。调用这个方法旋转完毕后，会调用<code>crop</code>参数的方法，此方法用到了css3中的2D旋转属性<code>transform</code>，需要浏览器支持css3</p></blockquote><ul><li><p><code>degree</code></p><blockquote><p>图片的旋转角度，取正直图片顺时针旋转，取负值图片逆时针旋转</p></blockquote><ul><li>类型：<code>Number</code></li></ul></li></ul><h4 id="rotateTo-degree"><a href="#rotateTo-degree" class="headerlink" title="rotateTo(degree)"></a>rotateTo(degree)</h4><blockquote><p>图片旋转到指定角度方法。调用这个方法旋转完毕后，会调用<code>crop</code>参数的方法，此方法用到了css3中的2D旋转属性<code>transform</code>，需要浏览器支持css3</p></blockquote><ul><li><p><code>degree</code></p><blockquote><p>图片的旋转角度，取正直图片顺时针旋转，取负值图片逆时针旋转</p></blockquote><ul><li>类型：<code>Number</code></li></ul></li></ul><h4 id="scale-scaleX-scaleY"><a href="#scale-scaleX-scaleY" class="headerlink" title="scale(scaleX, [scaleY])"></a>scale(scaleX, [scaleY])</h4><blockquote><p>翻转图片的方法。调用这个方法旋转完毕后，会调用<code>crop</code>参数的方法，此方法需要把参数中的<code>scalable</code>值设置为真，此方法用到了css3中的2D旋转属性<code>transform</code>，需要浏览器支持css3</p></blockquote><ul><li><p><code>scaleX</code></p><blockquote><p>水平翻转图片，-1表示水平翻转，1不做任何处理，</p></blockquote><ul><li>类型：<code>Number</code></li></ul></li><li><p><code>scaleY</code></p><blockquote><p>垂直翻转图片，-1表示垂直翻转，1不做任何处理</p></blockquote><ul><li>类型：<code>Number</code></li></ul></li></ul><h4 id="scaleX-scaleX"><a href="#scaleX-scaleX" class="headerlink" title="scaleX(scaleX)"></a>scaleX(scaleX)</h4><blockquote><p>水平翻转图片，-1表示水平翻转，1不做任何处理，</p></blockquote><ul><li>类型：<code>Number</code></li><li>默认：<code>1</code></li></ul><h4 id="scaleY-scaleY"><a href="#scaleY-scaleY" class="headerlink" title="scaleY(scaleY)"></a>scaleY(scaleY)</h4><blockquote><p>垂直翻转图片，-1表示垂直翻转，1不做任何处理，</p></blockquote><ul><li>类型：<code>Number</code></li><li>默认：<code>1</code></li></ul><h4 id="getData-rounded"><a href="#getData-rounded" class="headerlink" title="getData([rounded])"></a>getData([rounded])</h4><blockquote><p>获取最终裁切图片的信息</p></blockquote><ul><li><p>参数<code>rounded</code></p><blockquote><p>获取的值是否进行四舍五入, 取<code>true</code>表示进行</p></blockquote><ul><li>类型：<code>Boolean</code></li><li>默认：<code>false</code></li></ul></li><li><p>返回值</p><blockquote><p>输出最终裁切区域的位置和尺寸数据（基于原始图像的自然尺寸）。</p></blockquote><ul><li>类型：<code>Object</code></li><li>特征：<ul><li><code>x</code>：裁切区域的左偏移值</li><li><code>y</code>：裁切区域的上偏移值</li><li><code>width</code>：裁切区域的宽度</li><li><code>height</code>：裁切区域的高度</li><li><code>rotate</code>：图像的旋转角度</li><li><code>scaleX</code>：应用于图像横坐标的比例因子，图片左右翻转量</li><li><code>scaleY</code>：应用于图像纵坐标的比例因子，图片上下翻转量</li></ul></li></ul></li></ul><p><img src="/2020/03/26/jQuery/plugins/cropper/getData.jpg" alt="image"></p><pre><code class="javascript">/* 两种方法手动初始化裁切框 */var $image = $(&#39;#image&#39;);$image.cropper(options);// 方法一通过实例化裁切器的dom元素上一个cropper实例来调用var cropper = $image.data(&#39;cropper&#39;);const getData = cropper.getData(); //调用实例对象上的getData方法// 通过dom元素的jquery方法调用，getData是要执行的方法名，后边可以添加参数const getData = $image.cropper(&#39;getData&#39;, true);</code></pre><p>设置参数的返回值：</p><table><thead><tr><th>true</th><th>false</th></tr></thead><tbody><tr><td><img src="/2020/03/26/jQuery/plugins/cropper/getData_true.jpg" alt="image"></td><td><img src="/2020/03/26/jQuery/plugins/cropper/getData_false.jpg" alt="image"></td></tr></tbody></table><h4 id="setData-data"><a href="#setData-data" class="headerlink" title="setData(data)"></a>setData(data)</h4><blockquote><p>设置裁切框的数据，然后根据传过去的数据从新定位裁切框的位置大小，调用这个方法设置完毕后会同时执行<code>crop</code>方法两遍</p></blockquote><ul><li><p>参数：</p><blockquote><p>格式和<code>getData</code>方法返回的数据格式一样，可以传递一到多个值可选的值</p></blockquote><ul><li>类型：<code>Object</code></li></ul></li></ul><pre><code class="javascript">/* 两种方法手动初始化裁切框 */var $image = $(&#39;#image&#39;);$image.cropper(options);// 方法一通过实例化裁切器的dom元素上一个cropper实例来调用var cropper = $image.data(&#39;cropper&#39;);var setData1 = {x: 213.5, y: 215.3,width: 370,height: 370,rotate: 0,scaleX: 1,scaleY: 1};var setData2 = {x: 213.5};var setData3 = {x: 213.5,width: 370,height: 370};cropper.setData(setData3); //调用实例对象上的setData方法// 通过dom元素的jquery方法调用，setData是要执行的方法名，后边可以添加参数$image.cropper(&#39;setData&#39;, setData1);</code></pre><h4 id="getContainerData"><a href="#getContainerData" class="headerlink" title="getContainerData()"></a>getContainerData()</h4><blockquote><p>获取裁切器容器的大小</p></blockquote><ul><li>返回值<ul><li>类型 <code>Object</code><ul><li><code>width</code>：裁切器的宽度，也就是设置的Dom容器的宽度</li><li><code>height</code>：裁切器的高度，也就是设置的Dom容器的高度</li></ul></li></ul></li></ul><pre><code class="javascript">//调用实例对象上的getContainerData方法var containerData = cropper.getContainerData();// 通过dom元素的jquery方法调用，getContainerData是要执行的方法名var containerData = $image.cropper(&#39;getContainerData&#39;);console.log(containerData);</code></pre><p><img src="/2020/03/26/jQuery/plugins/cropper/getContainerData.jpg" alt="image"></p><h4 id="getImageData"><a href="#getImageData" class="headerlink" title="getImageData()"></a>getImageData()</h4><blockquote><p>获取图像的相关信息，包括大小，位置，缩放大小等和其他相关数据。</p></blockquote><ul><li>返回值<ul><li>类型 <code>Object</code><ul><li><code>left</code>：图像的左偏移量</li><li><code>top</code>：图像的上偏移量</li><li><code>width</code>：图像当前的宽度</li><li><code>height</code>：图像当前的高度</li><li><code>naturalWidth</code>：图片的原始宽度</li><li><code>naturalHeight</code>：图片的原始高度</li><li><code>aspectRatio</code>：图像的高宽比</li><li><code>rotate</code>：旋转图像的旋转角度</li><li><code>scaleX</code>：图片X轴的翻转量</li><li><code>scaleY</code>：图片Y轴的翻转量</li></ul></li></ul></li></ul><pre><code class="javascript">//调用实例对象上的getImageData方法var getImageData = cropper.getImageData();// 通过dom元素的jquery方法调用，getImageData是要执行的方法名var getImageData = $image.cropper(&#39;getImageData&#39;);console.log(getImageData);</code></pre><p><img src="/2020/03/26/jQuery/plugins/cropper/getImageData.jpg" alt="image"></p><h4 id="getCanvasData"><a href="#getCanvasData" class="headerlink" title="getCanvasData()"></a>getCanvasData()</h4><blockquote><p>获取图像的相关信息，包括大小，位置，缩放大小等和其他相关数据。</p></blockquote><ul><li>返回值<ul><li>类型 <code>Object</code><ul><li><code>left</code>：画布的左偏移量</li><li><code>top</code>：画布的上偏移</li><li><code>width</code>：画布的宽度</li><li><code>height</code>：画布的高度</li><li><code>naturalWidth</code>：画布的自然宽度（只读）</li><li><code>naturalHeight</code>：画布的自然高度（只读）</li></ul></li></ul></li></ul><pre><code class="javascript">// 获取画布信息var getCanvasData = cropper.getCanvasData();// var getCanvasData = $image.cropper(&#39;getCanvasData&#39;);console.log(getCanvasData);</code></pre><p><img src="/2020/03/26/jQuery/plugins/cropper/getCanvasData.jpg" alt="image"></p><h4 id="setCanvasData-data"><a href="#setCanvasData-data" class="headerlink" title="setCanvasData(data)"></a>setCanvasData(data)</h4><blockquote><p>使用新数据更改画布（图像包装器）的位置和大小，调用这个方法设置完毕后会同时执行<code>crop</code>方法两遍</p></blockquote><ul><li><p>参数：</p><blockquote><p>格式和<code>getCanvasData</code>方法返回的数据格式一样，可以传递一到多个值可选的值，更改是按照<code>viewMode</code>的参数值进行放大和缩小</p></blockquote><ul><li>类型：<code>Object</code></li></ul></li></ul><pre><code class="javascript">/* 两种方法手动初始化裁切框 */var $image = $(&#39;#image&#39;);$image.cropper(options);// 方法一通过实例化裁切器的dom元素上一个cropper实例来调用var cropper = $image.data(&#39;cropper&#39;);var setData1 = {left: 213.5, top: 215.3,width: 370,height: 370,naturalWidth: 0,naturalHeight: 1};var setData2 = {left: 213.5};var setData3 = {top: 213.5,width: 370,height: 370};cropper.setCanvasData(setData3); //调用实例对象上的setCanvasData方法// 通过dom元素的jquery方法调用，setCanvasData是要执行的方法名，后边可以添加参数$image.cropper(&#39;setCanvasData&#39;, setData1);</code></pre><h4 id="getCropBoxData"><a href="#getCropBoxData" class="headerlink" title="getCropBoxData()"></a>getCropBoxData()</h4><blockquote><p>获取裁切框的相关信息，包括大小，位置，等相关数据。</p></blockquote><ul><li>返回值<ul><li>类型 <code>Object</code><ul><li><code>left</code>：裁切框左偏移像素</li><li><code>top</code>：裁切框的上偏移像素</li><li><code>width</code>：裁切框的宽度</li><li><code>height</code>：裁切框的高度</li></ul></li></ul></li></ul><pre><code class="javascript">// 获取画布信息var getCropBoxData = cropper.getCropBoxData();// var getCropBoxData = $image.cropper(&#39;getCropBoxData&#39;);console.log(getCropBoxData);</code></pre><p><img src="/2020/03/26/jQuery/plugins/cropper/getCropBoxData.jpg" alt="image"></p><h4 id="setCropBoxData-data"><a href="#setCropBoxData-data" class="headerlink" title="setCropBoxData(data)"></a>setCropBoxData(data)</h4><blockquote><p>设置裁切框的位置和大小，调用这个方法设置完毕后会同时执行<code>crop</code>方法</p></blockquote><ul><li><p>参数：</p><blockquote><p>格式和<code>getCropBoxData</code>方法返回的数据格式一样，可以传递一到多个值可选的值，更改是按照<code>viewMode</code>的参数值进行放大和缩小</p></blockquote><ul><li>类型：<code>Object</code></li></ul></li></ul><pre><code class="javascript">// 设置裁切框大小和位置setCropBoxData = {left: 10, top: 10, width: 100, height:20}// cropper.setCropBoxData(setCropBoxData)$image.cropper(&#39;setCropBoxData&#39;, setCropBoxData);</code></pre><h4 id="getCroppedCanvas"><a href="#getCroppedCanvas" class="headerlink" title="getCroppedCanvas()"></a>getCroppedCanvas()</h4><blockquote><p>获取裁切框的相关信息，包括大小，位置，等相关数据。</p></blockquote><ul><li>返回值<ul><li>类型 <code>Object</code><ul><li><code>left</code>：裁切框左偏移像素</li><li><code>top</code>：裁切框的上偏移像素</li><li><code>width</code>：裁切框的宽度</li><li><code>height</code>：裁切框的高度</li></ul></li></ul></li></ul><pre><code class="javascript">// 获取画布信息var getCropBoxData = cropper.getCropBoxData();// var getCropBoxData = $image.cropper(&#39;getCropBoxData&#39;);console.log(getCropBoxData);</code></pre><p><img src="/2020/03/26/jQuery/plugins/cropper/getCropBoxData.jpg" alt="image"></p><h4 id="setAspectRatio-aspectRatio"><a href="#setAspectRatio-aspectRatio" class="headerlink" title="setAspectRatio(aspectRatio)"></a>setAspectRatio(aspectRatio)</h4><blockquote><p>设置裁切框的裁切比例，参数需要为正数，调用这个方法设置完毕后会同时执行<code>crop</code>方法</p></blockquote><ul><li>参数<ul><li>类型：<code>Number</code></li></ul></li></ul><h4 id="setDragMode-mode"><a href="#setDragMode-mode" class="headerlink" title="setDragMode([mode])"></a>setDragMode([mode])</h4><blockquote><p>设置裁切器的拖动模式，您可以通过双击裁切器来切换“裁切”和“移动”模式。</p></blockquote><ul><li>参数<ul><li>类型：<code>String</code></li><li>默认：<code>none</code></li><li>选项：<code>none</code>、<code>crop</code>、<code>move</code></li></ul></li></ul><h3 id="事件-Events"><a href="#事件-Events" class="headerlink" title="事件(Events)"></a>事件(Events)</h3><blockquote><p>可以通过给绑定了裁切器的Dom图片元素绑定事件，来执行一些方法，可以通过两种方式绑定，<br>1、通过jQuery的on绑定；<br>2、通过原生js的addEventListener方法绑定；</p></blockquote><h4 id="ready-1"><a href="#ready-1" class="headerlink" title="ready"></a>ready</h4><blockquote><p>当目标图像已加载且裁切器实例已准备好运行时，将触发此事件。</p></blockquote><ul><li>类型：<code>Event</code></li></ul><pre><code class="javascript">// 通过jquery绑定事件$image.on(&#39;ready&#39;, function (event) {  // 这里的事件是通过jquery处理的事件对象  console.log(event);});// 通过js原生绑定$image[0].addEventListener(&#39;ready&#39;, function (event) {  // 这里的事件是原生js事件对象  console.log(event);});</code></pre><h4 id="cropstart-1"><a href="#cropstart-1" class="headerlink" title="cropstart"></a>cropstart</h4><blockquote><p>当裁切开始，或裁切框开始更改的时候触发此事件</p></blockquote><p>执行方法后的<code>event</code>参数对象详细介绍</p><ul><li>event.detail.originalEvent 事件的详细信息<ul><li>类型：<code>Event</code></li><li>可能的事件类型：<code>mousedown</code>、<code>touchstart</code>、<code>pointerdown</code></li></ul></li><li>event.detail.action 事件动作的详细信息<ul><li>类型：<code>Sting</code></li><li>可能的值：<ul><li><code>crop</code>：创建一个新的裁切框</li><li><code>move</code>：移动画布（图像包装器）</li><li><code>zoom</code>：通过触摸放大/缩小画布（图像包装器）。</li><li><code>e</code>：调整裁切框东侧的大小</li><li><code>w</code>：调整裁切框西侧的大小</li><li><code>s</code>：调整裁切框南侧的大小</li><li><code>n</code>：调整裁切框北侧的大小</li><li><code>se</code>：调整裁切框东南侧的大小</li><li><code>sw</code>：调整裁切框西南侧的大小</li><li><code>ne</code>：调整裁切框东北的大小</li><li><code>nw</code>：调整裁切框西北侧的大小</li><li><code>all</code>：移动裁切框（所有方向）</li></ul></li></ul></li></ul><p>可以通过下列方式得到：</p><pre><code class="javascript">  // 通过js原生绑定  $image[0].addEventListener(&#39;cropstart&#39;, (event) =&gt; {    console.log(event.detail.originalEvent);    console.log(event.detail.action);  });  // 通过jquery绑定  $image.on(&#39;cropstart&#39;, (event) =&gt; {    console.log(event.detail.originalEvent);    console.log(event.detail.action);  });</code></pre><h4 id="cropmove-1"><a href="#cropmove-1" class="headerlink" title="cropmove"></a>cropmove</h4><blockquote><p>当移动或者更改裁切框时候触发此事件</p></blockquote><p>执行方法后的<code>event</code>参数对象详细介绍</p><ul><li>event.detail.originalEvent 事件的详细信息<ul><li>类型：<code>Event</code></li><li>可能的事件类型：<code>mousemove</code>、<code>touchmove</code>、<code>pointermove</code></li></ul></li><li>event.detail.action 事件的详细信息和<code>cropstart</code>的一样</li></ul><h4 id="cropend-1"><a href="#cropend-1" class="headerlink" title="cropend"></a>cropend</h4><blockquote><p>当停止移动或者停止更改裁切框时候触发此事件</p></blockquote><p>执行方法后的<code>event</code>参数对象详细介绍</p><ul><li>event.detail.originalEvent 事件的详细信息<ul><li>类型：<code>Event</code></li><li>可能的事件类型：<code>mouseend</code>、<code>touchend</code>、<code>pointerend</code></li></ul></li><li>event.detail.action 事件的详细信息和<code>cropstart</code>的一样</li></ul><h4 id="crop-2"><a href="#crop-2" class="headerlink" title="crop"></a>crop</h4><blockquote><p>当画布或裁切框发生变化时触发。</p></blockquote><p>执行方法后的<code>event</code>参数对象详细介绍</p><ul><li>event.detail 事件中的数据详细信息，和<code>getDate</code>方法得到的数据相同，，能够得到最终裁切区域的位置和尺寸数据（基于原始图像的原尺寸）。<ul><li>类型：<code>Object</code><ul><li><code>x</code>：裁切区域的左偏移值</li><li><code>y</code>：裁切区域的上偏移值</li><li><code>width</code>：裁切区域的宽度</li><li><code>height</code>：裁切区域的高度</li><li><code>rotate</code>：图像的旋转角度</li><li><code>scaleX</code>：应用于图像横坐标的比例因子，图片左右翻转量</li><li><code>scaleY</code>：应用于图像纵坐标的比例因子，图片上下翻转量</li></ul></li></ul></li></ul><h4 id="zoom-1"><a href="#zoom-1" class="headerlink" title="zoom"></a>zoom</h4><blockquote><p>裁切器开始放大或缩小其画布（图像包装器）时，将触发此事件。</p></blockquote><p>执行方法后的<code>event</code>参数对象详细介绍</p><ul><li><p>event.detail.originalEvent：</p><ul><li>类型： <code>Event</code></li><li>事件类型：<code>wheel</code>，<code>touchmove</code>。</li></ul></li><li><p>event.detail.oldRatio：</p></li></ul><blockquote><p>画布缩放前的旧（当前）比率</p><ul><li>类型： <code>Number</code></li></ul></blockquote><ul><li>event.detail.ratio：</li></ul><blockquote><p>画布缩放后的新（下一个）比例（canvasData.width / canvasData.naturalWidth）</p><ul><li>类型： <code>Number</code></li></ul></blockquote><p><img src="/2020/03/26/jQuery/plugins/cropper/zoom.jpg" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
          <category> plugins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> jQuery插件 </tag>
            
            <tag> 图片处理 </tag>
            
            <tag> 图片裁切 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css3中的filter滤镜使用</title>
      <link href="/2020/02/23/CSS3/filter/"/>
      <url>/2020/02/23/CSS3/filter/</url>
      
        <content type="html"><![CDATA[<h1 id="css3中的filter滤镜使用"><a href="#css3中的filter滤镜使用" class="headerlink" title="css3中的filter滤镜使用"></a>css3中的filter滤镜使用</h1><blockquote><p><code>filter</code> 滤镜，借鉴了Photoshop的滤镜效果，在ps中主要用来设置图层图片的模糊，颜色的高亮，对比度等效果，在css中滤镜通常用于调整图像，背景和边框的渲染和效果。</p></blockquote><table><thead><tr><th>函数名</th><th>取值</th><th>作用</th></tr></thead><tbody><tr><td>grayscale</td><td>值为0-1之间的小数, 或0%-100%百分数</td><td>灰度</td></tr><tr><td>sepia</td><td>值为0-1之间的小数, 或0%-100%百分数</td><td>褐色</td></tr><tr><td>saturate</td><td>值为num</td><td>饱和度</td></tr><tr><td>hue-rotate</td><td>值为angle</td><td>色相旋转</td></tr><tr><td>invert</td><td>反色</td><td>值为0-1之间的小数</td></tr><tr><td>opacity</td><td>值为0-1之间的小数</td><td>透明度</td></tr><tr><td>brightness</td><td>值为0-1之间的小数</td><td>亮度</td></tr><tr><td>contrast</td><td>值为num</td><td>对比度</td></tr><tr><td>blur</td><td>值为length</td><td>模糊</td></tr><tr><td>drop-shadow</td><td>和投影取值相同</td><td>阴影</td></tr></tbody></table><a id="more"></a><p><strong>兼容性：</strong></p><p><img src="/2020/02/23/CSS3/filter/filter.png" alt="image"><br><a href="https://caniuse.com/#search=filter" rel="external nofollow noopener noreferrer" target="_blank">查看兼容性详情</a></p><h2 id="grayscale-灰度模式"><a href="#grayscale-灰度模式" class="headerlink" title="grayscale 灰度模式"></a>grayscale 灰度模式</h2><blockquote><p>用来设置图像或者元素的灰度模式，也就是去掉所有颜色以灰色显示元素</p></blockquote><p><strong>基本语法：</strong> <code>filter:grayscale(val)</code></p><p><code>val</code> ：值为100%则完全转为灰度图像，值为0%图像无变化。值在0%到100%之间，则是效果的线性乘子。若未设置，值默认是0，同时也可以去0-1之间小数；</p><pre><code class="css">/* 100%灰度 */filter:grayscale(1);/* 50%灰度 */filter:grayscale(0.5);/* 0%灰度 */filter:grayscale(0);</code></pre><p><strong>案例:</strong> <a href="https://codepen.io/qwguo88/pen/MWYQyqK" rel="external nofollow noopener noreferrer" target="_blank">Demo</a><br><strong>颜色灰度：</strong></p><iframe height="500" style="width: 100%;" scrolling="no" title="filter-color-grayscale" src="https://codepen.io/qwguo88/embed/MWYQyqK?height=500&theme-id=30742&default-tab=result" frameborder="no" allowtransparency="true" allowfullscreen="true"><br>  See the Pen <a href="https://codepen.io/qwguo88/pen/MWYQyqK" rel="external nofollow noopener noreferrer" target="_blank">filter-color-grayscale</a> by qwguo<br>  (<a href="https://codepen.io/qwguo88" rel="external nofollow noopener noreferrer" target="_blank">@qwguo88</a>) on <a href="https://codepen.io" rel="external nofollow noopener noreferrer" target="_blank">CodePen</a>.<br></iframe><br><strong>图片灰度：</strong><br><iframe height="500" style="width: 100%;" scrolling="no" title="filter-img-grayscale" src="https://codepen.io/qwguo88/embed/yLNVdBp?height=500&theme-id=30742&default-tab=result" frameborder="no" allowtransparency="true" allowfullscreen="true"><br>  See the Pen <a href="https://codepen.io/qwguo88/pen/yLNVdBp" rel="external nofollow noopener noreferrer" target="_blank">filter-img-grayscale</a> by qwguo<br>  (<a href="https://codepen.io/qwguo88" rel="external nofollow noopener noreferrer" target="_blank">@qwguo88</a>) on <a href="https://codepen.io" rel="external nofollow noopener noreferrer" target="_blank">CodePen</a>.<br></iframe><h2 id="sepia-褐色"><a href="#sepia-褐色" class="headerlink" title="sepia 褐色"></a>sepia 褐色</h2><blockquote><p>将图片或者元素以褐色的形式显示，也就是复古效果。</p></blockquote><p><strong>基本语法：</strong> <code>filter:sepia(val)</code></p><p><code>val</code> ：值定义转换的比例。值为100%则完全是深褐色的，值为0%图像无变化。值在0%到100%之间，则是效果的线性乘子。若未设置，值默认是0，同时也可以去0-1之间小数；</p><pre><code class="css">/* 0%深褐色 */filter:sepia(0);/* 10%深褐色 */filter:sepia(10%);/* 100%深褐色 */filter:sepia(100%);</code></pre><p><strong>案例：</strong> <a href="https://codepen.io/qwguo88/pen/Jjdbzyg" rel="external nofollow noopener noreferrer" target="_blank">Demo</a></p><iframe height="500" style="width: 100%;" scrolling="no" title="filter-sepia" src="https://codepen.io/qwguo88/embed/Jjdbzyg?height=300&theme-id=30742&default-tab=result" frameborder="no" allowtransparency="true" allowfullscreen="true"><br>  See the Pen <a href="https://codepen.io/qwguo88/pen/Jjdbzyg" rel="external nofollow noopener noreferrer" target="_blank">filter-sepia</a> by qwguo<br>  (<a href="https://codepen.io/qwguo88" rel="external nofollow noopener noreferrer" target="_blank">@qwguo88</a>) on <a href="https://codepen.io" rel="external nofollow noopener noreferrer" target="_blank">CodePen</a>.<br></iframe><h2 id="saturate-饱和度"><a href="#saturate-饱和度" class="headerlink" title="saturate 饱和度"></a>saturate 饱和度</h2><blockquote><p>用于设置图像的饱和度。</p></blockquote><p><strong>基本语法：</strong> <code>filter: saturate(val)</code></p><p><code>val</code> ：取值为0%则是完全不饱和，值为100%则图像无变化。其他值，则是效果的线性乘子。超过100%的值是允许的，则有更高的饱和度。 若值未设置，值默认是1，同时也可以去0-1之间小数。</p><pre><code class="css">/* 0%深褐色 */filter:saturate(0);/* 10%深褐色 */filter:saturate(10%);/* 100%深褐色 */filter:saturate(100%);</code></pre><p><strong>案例：</strong> <a href="https://codepen.io/qwguo88/pen/qBdqvPW" rel="external nofollow noopener noreferrer" target="_blank">Demo</a></p><iframe height="500" style="width: 100%;" scrolling="no" title="filter-saturate" src="https://codepen.io/qwguo88/embed/qBdqvPW?height=300&theme-id=30742&default-tab=result" frameborder="no" allowtransparency="true" allowfullscreen="true"><br>  See the Pen <a href="https://codepen.io/qwguo88/pen/qBdqvPW" rel="external nofollow noopener noreferrer" target="_blank">filter-saturate</a> by qwguo<br>  (<a href="https://codepen.io/qwguo88" rel="external nofollow noopener noreferrer" target="_blank">@qwguo88</a>) on <a href="https://codepen.io" rel="external nofollow noopener noreferrer" target="_blank">CodePen</a>.<br></iframe><h2 id="hue-rotate-色相旋转"><a href="#hue-rotate-色相旋转" class="headerlink" title="hue-rotate 色相旋转"></a>hue-rotate 色相旋转</h2><blockquote><p>给图像应用色相旋转。</p></blockquote><p><strong>基本语法：</strong> <code>filter: hue-rotate(angle)</code></p><p><code>angle</code> ：用于设定图像被调整的色环角度值。值为0deg，则图像无变化。若值未设置，默认值是0deg。该值虽然没有最大值，超过360deg的值相当于又绕一圈。</p><pre><code class="css">/* 无变化 */filter: hue-rotate(0deg);/* 色相旋转30度 */filter: hue-rotate(30deg);/* 色相旋转360度 */filter: hue-rotate(360deg);</code></pre><p><strong>案例：</strong> <a href="https://codepen.io/qwguo88/pen/XWbNLmx" rel="external nofollow noopener noreferrer" target="_blank">Demo</a></p><iframe height="500" style="width: 100%;" scrolling="no" title="filter-hue-rotate" src="https://codepen.io/qwguo88/embed/XWbNLmx?height=500&theme-id=30742&default-tab=result" frameborder="no" allowtransparency="true" allowfullscreen="true"><br>  See the Pen <a href="https://codepen.io/qwguo88/pen/XWbNLmx" rel="external nofollow noopener noreferrer" target="_blank">filter-hue-rotate</a> by qwguo<br>  (<a href="https://codepen.io/qwguo88" rel="external nofollow noopener noreferrer" target="_blank">@qwguo88</a>) on <a href="https://codepen.io" rel="external nofollow noopener noreferrer" target="_blank">CodePen</a>.<br></iframe><h2 id="invert-反色"><a href="#invert-反色" class="headerlink" title="invert 反色"></a>invert 反色</h2><blockquote><p>给图片进行反转取色显示</p></blockquote><p><strong>基本语法：</strong> <code>filter: invert(val)</code></p><p><code>val</code> ：取值为100%表示完全反转。值为0%则图像无变化。值在0%和100%之间。 若值未设置，值默认是0。，同时也可以去0-1之间小数。</p><pre><code class="css">/* 无变化 */filter: invert(0);/* 取反30% */filter: invert(30%);/* or */filter: invert(.3);</code></pre><p><strong>案例：</strong> <a href="https://codepen.io/qwguo88/pen/PoqbMWe" rel="external nofollow noopener noreferrer" target="_blank">Demo</a></p><iframe height="500" style="width: 100%;" scrolling="no" title="filter-invert" src="https://codepen.io/qwguo88/embed/PoqbMWe?height=500&theme-id=30742&default-tab=result" frameborder="no" allowtransparency="true" allowfullscreen="true"><br>  See the Pen <a href="https://codepen.io/qwguo88/pen/PoqbMWe" rel="external nofollow noopener noreferrer" target="_blank">filter-invert</a> by qwguo<br>  (<a href="https://codepen.io/qwguo88" rel="external nofollow noopener noreferrer" target="_blank">@qwguo88</a>) on <a href="https://codepen.io" rel="external nofollow noopener noreferrer" target="_blank">CodePen</a>.<br></iframe><h2 id="opacity-透明度"><a href="#opacity-透明度" class="headerlink" title="opacity 透明度"></a>opacity 透明度</h2><blockquote><p>给图像或者元素设置透明度，该函数与已有的opacity属性很相似，不同之处在于通过filter，一些浏览器为了提升性能会提供硬件加速。</p></blockquote><p><strong>基本语法：</strong> <code>filter: opacity(val)</code></p><p><code>val</code> ： 取值为0%则是完全透明，值为100%则图像无变化。值在0%和100%之间。 若值未设置，值默认是1。</p><pre><code class="css">/* 无变化 */filter: opacity(0);/* 透明度30% */filter: opacity(30%);/* or */filter: opacity(.3);</code></pre><p><strong>案例：</strong> <a href="https://codepen.io/qwguo88/pen/MWwbNPa" rel="external nofollow noopener noreferrer" target="_blank">Demo</a></p><iframe height="500" style="width: 100%;" scrolling="no" title="filter-opacity" src="https://codepen.io/qwguo88/embed/MWwbNPa?height=500&theme-id=30742&default-tab=result" frameborder="no" allowtransparency="true" allowfullscreen="true"><br>  See the Pen <a href="https://codepen.io/qwguo88/pen/MWwbNPa" rel="external nofollow noopener noreferrer" target="_blank">filter-opacity</a> by qwguo<br>  (<a href="https://codepen.io/qwguo88" rel="external nofollow noopener noreferrer" target="_blank">@qwguo88</a>) on <a href="https://codepen.io" rel="external nofollow noopener noreferrer" target="_blank">CodePen</a>.<br></iframe><h2 id="brightness-亮度"><a href="#brightness-亮度" class="headerlink" title="brightness 亮度"></a>brightness 亮度</h2><blockquote><p>用于设置图像的亮度，给图片应用一种线性乘法，使其看起来更亮或更暗。</p></blockquote><p><strong>基本语法：</strong> <code>filter: brightness(val)</code></p><p><code>val</code> ： 取值如果是0%，图像会全黑。取值是100%，则图像无变化。其他的值对应线性乘数效果。值超过100%也是可以的，图像会比原来更亮。如果没有设定值，默认是1。</p><pre><code class="css">/* 无变化 */filter: brightness(0);/* 图像变暗70% */filter: brightness(30%);/* or */filter: brightness(.3);</code></pre><p><strong>案例：</strong> <a href="https://codepen.io/qwguo88/pen/xxGRveL" rel="external nofollow noopener noreferrer" target="_blank">Demo</a></p><iframe height="500" style="width: 100%;" scrolling="no" title="filter-brightness" src="https://codepen.io/qwguo88/embed/xxGRveL?height=500&theme-id=30742&default-tab=result" frameborder="no" allowtransparency="true" allowfullscreen="true"><br>  See the Pen <a href="https://codepen.io/qwguo88/pen/xxGRveL" rel="external nofollow noopener noreferrer" target="_blank">filter-brightness</a> by qwguo<br>  (<a href="https://codepen.io/qwguo88" rel="external nofollow noopener noreferrer" target="_blank">@qwguo88</a>) on <a href="https://codepen.io" rel="external nofollow noopener noreferrer" target="_blank">CodePen</a>.<br></iframe><h2 id="contrast-对比度"><a href="#contrast-对比度" class="headerlink" title="contrast 对比度"></a>contrast 对比度</h2><blockquote><p>用于设置图像的对比度，</p></blockquote><p><strong>基本语法：</strong> <code>filter: contrast(val)</code></p><p><code>val</code> ： 值是0%的话，图像会全灰。值是100%，图像不变。值可以超过100%，意味着会运用更低的对比。若没有设置值，默认是1。</p><pre><code class="css">/* 无变化 */filter: contrast(0);/* 图像对比度变暗70% */filter: contrast(30%);/* or */filter: contrast(.3);</code></pre><p><strong>案例：</strong> <a href="https://codepen.io/qwguo88/pen/OJVbKKG" rel="external nofollow noopener noreferrer" target="_blank">Demo</a></p><iframe height="500" style="width: 100%;" scrolling="no" title="filter-contrast" src="https://codepen.io/qwguo88/embed/OJVbKKG?height=500&theme-id=30742&default-tab=result" frameborder="no" allowtransparency="true" allowfullscreen="true"><br>  See the Pen <a href="https://codepen.io/qwguo88/pen/OJVbKKG" rel="external nofollow noopener noreferrer" target="_blank">filter-contrast</a> by qwguo<br>  (<a href="https://codepen.io/qwguo88" rel="external nofollow noopener noreferrer" target="_blank">@qwguo88</a>) on <a href="https://codepen.io" rel="external nofollow noopener noreferrer" target="_blank">CodePen</a>.<br></iframe><h2 id="blur-模糊度"><a href="#blur-模糊度" class="headerlink" title="blur 模糊度"></a>blur 模糊度</h2><blockquote><p>用于设置图像的高斯模糊度</p></blockquote><p><strong>基本语法：</strong> <code>filter: blur(radius)</code></p><p><code>radius</code> ：设定高斯函数的标准差，或者是屏幕上以多少像素融在一起，所以值越大越模糊；如果没有设定值，则默认是0；这个参数可设置css长度值（em、px、rem、pt）等，但不接受百分比值。</p><pre><code class="css">/* 无变化 */filter: blur(0);/* 设置图像高斯模糊2个像素融合 */filter: blur(2px);/* 设置图像高斯模糊5个像素融合 */filter: blur(5px);</code></pre><p><strong>案例：</strong> <a href="https://codepen.io/qwguo88/pen/OJVbKKG" rel="external nofollow noopener noreferrer" target="_blank">Demo</a></p><iframe height="500" style="width: 100%;" scrolling="no" title="filter-contrast" src="https://codepen.io/qwguo88/embed/OJVbKKG?height=500&theme-id=30742&default-tab=result" frameborder="no" allowtransparency="true" allowfullscreen="true"><br>  See the Pen <a href="https://codepen.io/qwguo88/pen/OJVbKKG" rel="external nofollow noopener noreferrer" target="_blank">filter-contrast</a> by qwguo<br>  (<a href="https://codepen.io/qwguo88" rel="external nofollow noopener noreferrer" target="_blank">@qwguo88</a>) on <a href="https://codepen.io" rel="external nofollow noopener noreferrer" target="_blank">CodePen</a>.<br></iframe><h2 id="drop-shadow-投影"><a href="#drop-shadow-投影" class="headerlink" title="drop-shadow 投影"></a>drop-shadow 投影</h2><blockquote><p>设置图像或元素的投影效果，他和box-shadow效果一样，但是区别在于他不能使用<code>inset</code>设置内阴影，也不能同时这只多个阴影。</p></blockquote><p><strong>基本语法：</strong> <code>filter: drop-shadow(offset-x offset-y blur-radius color);</code></p><p><code>offset-x</code>：设置投影的x轴的投影大小，取正直为投影像右偏移，取负值为投影像左偏移；<br><code>offset-y</code>：设置投影的Y轴的投影大小，取正直为投影像下偏移，取负值为投影像上偏移；<br><code>blur-radius</code>：表示投影的模糊半径值，值越大表示投影越模糊并且越大，取0表示投影不进行模糊处理，此属性不支持负数；<br><code>color</code>：表示投影的颜色，可以使用颜色关键字(red)，十六进制法(#fff)，rgb，rgba等写法；</p><pre><code class="css">/* 只设置offset-x */filter: drop-shadow(10px 0 0 red);/* 只设置offset-y */filter: drop-shadow(0 10px 0 #c00);/* 只设置blur-radius */filter: drop-shadow(0 0 10px rgb(255, 0, 0, .5))/* 同时设置 */filter: drop-shadow(10px 20px 20px rgba(0, 0, 0, .5))</code></pre><p><strong>案例</strong> <a href="https://codepen.io/qwguo88/pen/rNVdRJq" rel="external nofollow noopener noreferrer" target="_blank">Demo</a></p><iframe height="500" style="width: 100%;" scrolling="no" title="filter-drop-shadow" src="https://codepen.io/qwguo88/embed/rNVdRJq?height=500&theme-id=30742&default-tab=result" frameborder="no" allowtransparency="true" allowfullscreen="true"><br>  See the Pen <a href="https://codepen.io/qwguo88/pen/rNVdRJq" rel="external nofollow noopener noreferrer" target="_blank">filter-drop-shadow</a> by qwguo<br>  (<a href="https://codepen.io/qwguo88" rel="external nofollow noopener noreferrer" target="_blank">@qwguo88</a>) on <a href="https://codepen.io" rel="external nofollow noopener noreferrer" target="_blank">CodePen</a>.<br></iframe>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
          <category> CSS3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS3 </tag>
            
            <tag> CSS </tag>
            
            <tag> filter </tag>
            
            <tag> 滤镜 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>codeText</title>
      <link href="/2020/02/23/codeText/"/>
      <url>/2020/02/23/codeText/</url>
      
        <content type="html"><![CDATA[<pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;  &lt;meta charset=&quot;UTF-8&quot;&gt;  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;  &lt;title&gt;Document&lt;/title&gt;  &lt;style&gt;    b{      color:#c00;    }  &lt;/style&gt;  &lt;script&gt;    function(){      alert(123);    }  &lt;/script&gt;&lt;/head&gt;&lt;body&gt;  &lt;div id=&quot;abc&quot;&gt;&lt;/div&gt;  &lt;p class=&quot;abc&quot; id=&quot;p&quot; data-a=&quot;数据&quot;&gt;p标签&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><pre><code class="css">sub,sup {  font-size: 75%;  line-height: 0;  position: relative;  vertical-align: baseline;}sub {  bottom: -0.25em;}sup {  top: -0.5em;}</code></pre><pre><code class="less">  @media screen and (device-aspect-ratio: 1280/720) { … }  @media screen and (device-aspect-ratio: 2560/1440) { … }  html:lang(fr-be)  tr:nth-child(2n+1) /* represents every odd row of an HTML table */  img:nth-of-type(2n+1) { float: right; }  img:nth-of-type(2n) { float: left; }  body &gt; h2:not(:first-of-type):not(:last-of-type)  html|*:not(:link):not(:visited)  *|*:not(:hover)  p::first-line { text-transform: uppercase }  @namespace foo url(http://www.example.com);  foo|h1 { color: blue }  /* first rule */  span[hello=&quot;Ocean&quot;][goodbye=&quot;Land&quot;]  E[foo]{    padding:65px;  }</code></pre><pre><code class="scss">/* Some example SCSS */@import &quot;compass/css3&quot;;$variable: #333;$blue: #3bbfce;$margin: 16px;.content-navigation {  #nested {    background-color: black;  }  border-color: $blue;  color:    darken($blue, 9%);}.border {  padding: $margin / 2;  margin: $margin / 2;  border-color: $blue;}@mixin table-base {  th {    text-align: center;    font-weight: bold;  }  td, th {padding: 2px}}table.hl {  margin: 2em 0;  td.ln {    text-align: right;  }}li {  font: {    family: serif;    weight: bold;    size: 1.2em;  }}@mixin left($dist) {  float: left;  margin-left: $dist;}#data {  @include left(10px);  @include table-base;}.source {  @include flow-into(target);  border: 10px solid green;  margin: 20px;  width: 200px; }.new-container {  @include flow-from(target);  border: 10px solid red;  margin: 20px;  width: 200px; }body {  margin: 0;  padding: 3em 6em;  font-family: tahoma, arial, sans-serif;  color: #000;}@mixin yellow() {  background: yellow;}.big {  font-size: 14px;}.nested {  @include border-radius(3px);  @extend .big;  p {    background: whitesmoke;    a {      color: red;    }  }}#navigation a {  font-weight: bold;  text-decoration: none !important;}h1 {  font-size: 2.5em;}h2 {  font-size: 1.7em;}h1:before, h2:before {  content: &quot;::&quot;;}code {  font-family: courier, monospace;  font-size: 80%;  color: #418A8A;}</code></pre><pre><code class="vue">  &lt;template&gt;    &lt;div&gt;    &lt;/div&gt;  &lt;/template&gt;  &lt;script&gt;    export default {    }  &lt;/script&gt;  &lt;style lang=&quot;scss&quot; scoped&gt;    b{      color:#c00;      a{        color:#0c0      }    }  &lt;/style&gt;</code></pre><pre><code class="xml">&lt;html style=&quot;color: green&quot;&gt;  &lt;!-- this is a comment --&gt;  &lt;head&gt;    &lt;title&gt;HTML Example&lt;/title&gt;  &lt;/head&gt;  &lt;body&gt;    The indentation tries to be &lt;em&gt;somewhat &amp;quot;do what    I mean&amp;quot;&lt;/em&gt;... but might not match your style.  &lt;/body&gt;&lt;/html&gt;</code></pre><pre><code class="javascript">  setTimeout(()=&gt;{    console.log(123)  });  function(){    alert(123);  }  var abc;  abc === bcd;</code></pre><pre><code class="js">  setTimeout(()=&gt;{    console.log(123)  });  function(){    alert(123);  }    var abc;</code></pre><pre><code class="vue">&lt;template&gt;  &lt;div class=&quot;sass&quot;&gt;Im am a {{mustache-like}} template&lt;/div&gt;&lt;/template&gt;&lt;script lang=&quot;coffee&quot;&gt;  module.exports =    props: [&#39;one&#39;, &#39;two&#39;, &#39;three&#39;]&lt;/script&gt;&lt;style lang=&quot;sass&quot;&gt;.sass  font-size: 18px&lt;/style&gt;</code></pre><pre><code class="php">&lt;?php$a = array(&#39;a&#39; =&gt; 1, &#39;b&#39; =&gt; 2, 3 =&gt; &#39;c&#39;);echo &quot;$a[a] ${a[3] /* } comment */} {$a[b]} \$a[a]&quot;;function hello($who) {    return &quot;Hello $who!&quot;;}?&gt;</code></pre><pre><code class="json">a:{  a: 10,  b: 30}</code></pre><pre><code class="TypeScript">class Site {   name():void {      console.log(&quot;Runoob&quot;)   }}var obj = new Site();obj.name();</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>transition轻松实现元素过度效果</title>
      <link href="/2019/12/21/CSS3/transition/"/>
      <url>/2019/12/21/CSS3/transition/</url>
      
        <content type="html"><![CDATA[<h1 id="transition过度属性"><a href="#transition过度属性" class="headerlink" title="transition过度属性"></a>transition过度属性</h1><blockquote><p><code>transition</code>：用于设置DOM元素在不同状态之间切换的时候应用不同的过度效果，以前如果要想实现一个非生硬的状态切换需要写很多的js来实现，现在使用<code>transition</code>变可以轻松的实现。</p></blockquote><h3 id="transition-property"><a href="#transition-property" class="headerlink" title="transition-property"></a>transition-property</h3><blockquote><p><code>property</code>：表示属性的意思，这里用来设置元素要过度的css属性名。</p></blockquote><p><strong>基本语法：</strong><br><code>transition: none | all | property;</code></p><ul><li><code>none</code>：表示没有任何过度效果。</li><li><code>all</code>：初始值，表示所有的能过度属性都有过度效果。</li><li><code>property</code>：指定一个或多个属性名称执行过度效果，多个css属性名之间用逗号分隔开。<a id="more"></a></li></ul><p><strong>例如：</strong></p><pre><code class="css">/* 单个属性过渡 */transition-property: width;/* 多个属性过渡用逗号分隔 */transition-property: window, height, background-color, opacity;/* 全部属性过渡 */transition-property: all;</code></pre><p><strong>兼容性：</strong></p><p><img src="/2019/12/21/CSS3/transition/transition-property-caniuse.png" alt="image"></p><p><a href="https://caniuse.com/#search=transition-property" rel="external nofollow noopener noreferrer" target="_blank">查看兼容性详情</a></p><p>查看案例<a href="https://codepen.io/qwguo88/pen/YzzBPYM" rel="external nofollow noopener noreferrer" target="_blank">Demo</a></p><iframe height="500" style="width: 100%;" scrolling="no" title="transition-property" src="https://codepen.io/qwguo88/embed/YzzBPYM?height=500&theme-id=30742&default-tab=result" frameborder="no" allowtransparency="true" allowfullscreen="true"><br>  See the Pen <a href="https://codepen.io/qwguo88/pen/YzzBPYM" rel="external nofollow noopener noreferrer" target="_blank">transition-property</a> by qwguo<br>  (<a href="https://codepen.io/qwguo88" rel="external nofollow noopener noreferrer" target="_blank">@qwguo88</a>) on <a href="https://codepen.io" rel="external nofollow noopener noreferrer" target="_blank">CodePen</a>.<br></iframe><p>能够支持过度的css属性<a href="http://leaverou.github.io/animatable/" rel="external nofollow noopener noreferrer" target="_blank">查看1</a>，<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_animated_properties" rel="external nofollow noopener noreferrer" target="_blank">查看2</a></p><h3 id="transition-duration"><a href="#transition-duration" class="headerlink" title="transition-duration"></a>transition-duration</h3><blockquote><p><code>transition-duration</code>：表示过渡动画在多长时间内执行完毕。值以秒（s）或毫秒（ms）为单位不接受负值。可以指定多个值，每个值之间用逗号分开并且分别应用到 <code>transition-property</code> 指定的对应属性上。</p></blockquote><p><strong>基本语法：</strong><br><code>transition-duration: time;</code></p><ul><li><code>time</code>：指定动画执行时长。</li></ul><p><strong>例如：</strong></p><pre><code class="css">transition-duration: 10s;/* 如果是小数点左边只有一个0的话，前边的 0可以省略。 */transition-duration: .5s, 10ms, .9ms, 0.5s, 10.05s;</code></pre><p><strong>兼容性：</strong></p><p><img src="/2019/12/21/CSS3/transition/transition-duration-caniuse.png" alt="image"></p><p><a href="https://caniuse.com/#search=transition-duration" rel="external nofollow noopener noreferrer" target="_blank">查看兼容性详情</a></p><p>查看案例<a href="https://codepen.io/qwguo88/pen/LYYazMY" rel="external nofollow noopener noreferrer" target="_blank">Demo</a></p><iframe height="500" style="width: 100%;" scrolling="no" title="transition-duration" src="https://codepen.io/qwguo88/embed/LYYazMY?height=500&theme-id=30742&default-tab=result" frameborder="no" allowtransparency="true" allowfullscreen="true"><br>  See the Pen <a href="https://codepen.io/qwguo88/pen/LYYazMY" rel="external nofollow noopener noreferrer" target="_blank">transition-duration</a> by qwguo<br>  (<a href="https://codepen.io/qwguo88" rel="external nofollow noopener noreferrer" target="_blank">@qwguo88</a>) on <a href="https://codepen.io" rel="external nofollow noopener noreferrer" target="_blank">CodePen</a>.<br></iframe><h3 id="transition-timing-function"><a href="#transition-timing-function" class="headerlink" title="transition-timing-function"></a>transition-timing-function</h3><blockquote><p><code>transition-timing-function</code>：指定一个函数，定义属性值怎么变化。缓动函数 Timing functions 定义属性如何计算。多数 timing functions 由四点定义一个 bezier 曲线。也可以从 Easing Functions Cheat Sheet 选择缓动效果。</p></blockquote><p><strong>基本语法：</strong><br><code>transition-timing-function: ease | ease-in | ease-out | ease-in-out | linear | cubic-bezier(&lt;number&gt;, &lt;number&gt;, &lt;number&gt;, &lt;number&gt;) | step-start | set-end | steps(&lt;integer&gt;[, &lt;step-position&gt;]?) | inherit</code></p><ul><li><code>ease</code>：慢速开始，然后变快，然后慢速结束的过渡效果（cubic-bezier(0.25,0.1,0.25,1)）。</li><li><code>ease-in</code>：慢速开始的过渡效果（等于 cubic-bezier(0.42,0,1,1)）。</li><li><code>ease-out</code>：慢速结束的过渡效果（等于 cubic-bezier(0,0,0.58,1)）。</li><li><code>ease-in-out</code>：慢速开始和结束的过渡效果（等于 cubic-bezier(0.42,0,0.58,1)）。</li><li><code>linear</code>：以相同速度开始至结束的过渡效果（等于 cubic-bezier(0,0,1,1)）。</li><li><code>steps(4, end)</code>：四次运动到结束执行过度效果。</li><li><code>cubic-bezier(x1, y1, x2, y2)</code>：以贝塞尔函数算法执行过度效果。生成贝塞尔曲线网站：<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Tools/Cubic_Bezier_Generator" rel="external nofollow noopener noreferrer" target="_blank">website1</a>、<a href="https://cubic-bezier.com/" rel="external nofollow noopener noreferrer" target="_blank">website2</a>、<a href="https://easings.net/" rel="external nofollow noopener noreferrer" target="_blank">website</a></li></ul><p><img src="/2019/12/21/CSS3/transition/transition-timing-function-caniuse.png" alt="image"></p><p><a href="https://caniuse.com/#search=transition-timing-function" rel="external nofollow noopener noreferrer" target="_blank">查看兼容性详情</a></p><p>查看案例<a href="https://codepen.io/qwguo88/pen/zYYXypo" rel="external nofollow noopener noreferrer" target="_blank">Demo</a></p><iframe height="500" style="width: 100%;" scrolling="no" title="transition-timing-function" src="https://codepen.io/qwguo88/embed/zYYXypo?height=500&theme-id=30742&default-tab=result" frameborder="no" allowtransparency="true" allowfullscreen="true"><br>  See the Pen <a href="https://codepen.io/qwguo88/pen/zYYXypo" rel="external nofollow noopener noreferrer" target="_blank">transition-timing-function</a> by qwguo<br>  (<a href="https://codepen.io/qwguo88" rel="external nofollow noopener noreferrer" target="_blank">@qwguo88</a>) on <a href="https://codepen.io" rel="external nofollow noopener noreferrer" target="_blank">CodePen</a>.<br></iframe><h3 id="transition-delay"><a href="#transition-delay" class="headerlink" title="transition-delay"></a>transition-delay</h3><blockquote><p><code>transition-delay</code>：延迟指定时间后执行过度效果。值以秒（s）或毫秒（ms）为单位。取值为正时会延迟一段时间来响应过渡效果；取值为负时会导致过渡立即开始。可以指定多个延迟时间，每个延迟用逗号分开，分别作用于你所指定的相符合的css属性<code>transition-property</code>;</p></blockquote><p><strong>基本语法：</strong><br><code>transition: time | inherit | initial | unset</code></p><ul><li><code>time</code>：指定的时间，格式：10s | 10ms | 0.5s  (.5s) | -10ms | -5s (-.5s)</li><li><code>inherit</code>：</li></ul><p><img src="/2019/12/21/CSS3/transition/transition-delay-caniuse.png" alt="image"></p><p><a href="https://caniuse.com/#search=transition-delay" rel="external nofollow noopener noreferrer" target="_blank">查看兼容性详情</a></p><p>查看案例<a href="https://codepen.io/qwguo88/pen/qBBGOBG" rel="external nofollow noopener noreferrer" target="_blank">Demo</a></p><iframe height="500" style="width: 100%;" scrolling="no" title="transition-delay" src="https://codepen.io/qwguo88/embed/qBBGOBG?height=500&theme-id=30742&default-tab=result" frameborder="no" allowtransparency="true" allowfullscreen="true"><br>  See the Pen <a href="https://codepen.io/qwguo88/pen/qBBGOBG" rel="external nofollow noopener noreferrer" target="_blank">transition-delay</a> by qwguo<br>  (<a href="https://codepen.io/qwguo88" rel="external nofollow noopener noreferrer" target="_blank">@qwguo88</a>) on <a href="https://codepen.io" rel="external nofollow noopener noreferrer" target="_blank">CodePen</a>.<br></iframe><h3 id="transition"><a href="#transition" class="headerlink" title="transition"></a>transition</h3><blockquote><p><code>transition</code>：它是<code>transition-property</code>、<code>transition-duration</code>、<code>transition-timin-function</code>、<code>transition-delay</code> 的缩写形式，能够更方面的设置过渡效果，一般在开发中使用这种方式写过渡效果。</p></blockquote><p><strong>基本语法：</strong><br><code>transition: property duration timing-function delay | none</code></p><ul><li><code>none</code>：没有过渡效果。</li></ul><p><strong>基本写法：</strong></p><pre><code class="css">/* 两个值，属性名，过渡持续时间 */transition: margin-right 4s;/* 三个值，属性名，过渡持续时间，延迟开始过渡时间 */transition: margin-right 4s 1s;/* 三个值，属性名，过渡持续时间，过渡动画效果 */transition: margin-right 4s ease-in-out;/* 四个值，属性名，过渡持续时间，过渡动画效果，延迟开始过渡时间 */transition: margin-right 4s ease-in-out 1s;/* 可以同时写多个过渡属性，每个过渡之间用逗号分开 */transition: margin-right 4s, color 1s;/* 也可以使用all表示全部属性 */transition: all 0.5s ease-out;/* 其他 */transition: inherit;transition: initial;transition: unset;</code></pre><p><img src="/2019/12/21/CSS3/transition/transition-caniuse.png" alt="image"></p><p><a href="https://caniuse.com/#search=transition" rel="external nofollow noopener noreferrer" target="_blank">查看兼容性详情</a></p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
          <category> CSS3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS3 </tag>
            
            <tag> transition </tag>
            
            <tag> 过渡 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css3中控制js事件行为</title>
      <link href="/2019/12/17/CSS3/cssEvents/"/>
      <url>/2019/12/17/CSS3/cssEvents/</url>
      
        <content type="html"><![CDATA[<h1 id="pointer-events"><a href="#pointer-events" class="headerlink" title="pointer-events"></a>pointer-events</h1><blockquote><p>属性指定在什么情况下某个特定的图形元素可以成为鼠标事件的 <code>target</code>，这个属性主要应用在<code>SVG</code>元素上，这篇文章主要介绍的是应用在HTML的DOM元素上</p></blockquote><p><strong>语法：</strong><br><code>pointer-events: auto | none | inherit | initial | unset;</code><br><a id="more"></a></p><ul><li><code>auto</code>：自动表示使用DOM的默认行为。</li><li><code>none</code>：表示该元素不执行任何的js事件，包括其后代元素。但是，当其后代元素的此属性指定其他值时，鼠标事件可以指向后代元素，在这种情况下，鼠标事件将在捕获或冒泡阶段触发父元素的事件侦听器。</li><li><code>inherit</code>：表示继承父级的<code>pointer-events</code>的值。</li><li><code>initial</code>：初始化，和<code>auto</code>效果一样，表示执行元素的默认行为。</li><li><code>unset</code>：未定义，继承父级行为。</li></ul><p><strong>兼容性：</strong><br><img src="/2019/12/17/CSS3/cssEvents/pointer-events-caniuse.png" alt="image"><br><a href="https://caniuse.com/#search=pointer-events" rel="external nofollow noopener noreferrer" target="_blank">查看兼容性详情</a></p><p>查看案例 <a href="https://codepen.io/qwguo88/pen/MWWZWBj" rel="external nofollow noopener noreferrer" target="_blank">Demo</a></p><iframe height="500" style="width: 100%;" scrolling="no" title="pointer-events" src="https://codepen.io/qwguo88/embed/MWWZWBj?height=300&theme-id=30742&default-tab=result" frameborder="no" allowtransparency="true" allowfullscreen="true"><br>  See the Pen <a href="https://codepen.io/qwguo88/pen/MWWZWBj" rel="external nofollow noopener noreferrer" target="_blank">pointer-events</a> by qwguo<br>  (<a href="https://codepen.io/qwguo88" rel="external nofollow noopener noreferrer" target="_blank">@qwguo88</a>) on <a href="https://codepen.io" rel="external nofollow noopener noreferrer" target="_blank">CodePen</a>.<br></iframe><h1 id="touch-action"><a href="#touch-action" class="headerlink" title="touch-action"></a>touch-action</h1><blockquote><p>touch-action是控制手势事件过滤的CSS属性，为开发人员提供了一种声明性机制，以有选择地禁用触摸滚动（在一个或两个轴上）或双击缩放，用于设置触摸屏用户如何操纵元素的区域</p></blockquote><p><strong>语法：</strong><br><code>touch-action: auto | none | [ [ pan-x | pan-left | pan-right ] || [ pan-y | pan-up | pan-down ] || pinch-zoom ] | manipulation;</code></p><ul><li><code>auto</code>：初始化值，表示根据浏览器决定当用户触控事件发生时执行默认行为。</li><li><code>none</code>：禁用touch事件，表示把元素上的触屏事件行为禁用，当用户在元素上触发触控行为时不进行任何操作。</li><li><code>pan-x</code>：表示只开启x轴的滑动行为，也就是左右滑动。</li><li><code>pan-left</code>：表示只开启元素向左滑动。</li></ul><p><strong>兼容性：</strong><br><img src="/2019/12/17/CSS3/cssEvents/touch-action-caniuse.png" alt="image"><br><a href="https://caniuse.com/#search=touch-action" rel="external nofollow noopener noreferrer" target="_blank">查看兼容性详情</a></p><p>查看案例 <a href="https://codepen.io/qwguo88/pen/YzzdyMd" rel="external nofollow noopener noreferrer" target="_blank">Demo</a></p><iframe height="500" style="width: 100%;" scrolling="no" title="touch-action" src="https://codepen.io/qwguo88/embed/YzzdyMd?height=300&theme-id=30742&default-tab=result" frameborder="no" allowtransparency="true" allowfullscreen="true"><br>  See the Pen <a href="https://codepen.io/qwguo88/pen/YzzdyMd" rel="external nofollow noopener noreferrer" target="_blank">touch-action</a> by qwguo<br>  (<a href="https://codepen.io/qwguo88" rel="external nofollow noopener noreferrer" target="_blank">@qwguo88</a>) on <a href="https://codepen.io" rel="external nofollow noopener noreferrer" target="_blank">CodePen</a>.<br></iframe>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
          <category> CSS3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS3 </tag>
            
            <tag> events </tag>
            
            <tag> touch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flex布局</title>
      <link href="/2019/12/16/CSS3/flex/"/>
      <url>/2019/12/16/CSS3/flex/</url>
      
        <content type="html"><![CDATA[<h1 id="Flex"><a href="#Flex" class="headerlink" title="Flex"></a>Flex</h1><blockquote><p> flex 是 Flexible Box 的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。我们可以把任何容器转换成(flex container)成为<strong>弹性容器</strong>，它的所有子元素就变为(flex item)称为<strong>弹性项目成员</strong></p></blockquote><p>我们可以通过给任意容器元素添加 <code>display: flex;</code> <em>块级弹性容器</em> 和 <code>display:inline-flex;</code><em>行内块级弹性容器</em>；</p><p><strong><em>注意，设为 Flex 布局以后，子元素的<code>float</code>、<code>clear</code>和<code>vertical-align</code>属性将失效。</em></strong></p><h3 id="弹性容器的属性："><a href="#弹性容器的属性：" class="headerlink" title="弹性容器的属性："></a>弹性容器的属性：</h3><h4 id="flex-direction"><a href="#flex-direction" class="headerlink" title="flex-direction"></a>flex-direction</h4><blockquote><p><code>flex-direction</code>：用于设置容器中的子项目排列方向，定义主轴的方向（正反方向）</p></blockquote><a id="more"></a><p><strong>语法：</strong><br><code>flex-direction: row | row-reverse | column | column-reverse;</code></p><ul><li><code>row</code>：默认值，容器的主轴被定义为与文本方向相同，主轴起点和主轴终点与内容方向相同。一般：主轴为水平方向，起点在左端。</li><li><code>row-reverse</code>：表现和row的方向相同，但是置换了主轴起点和主轴终点。一般：主轴为水平方向，起点改为在右端。</li><li><code>column</code>：主轴为垂直方向，起点从上端乡下开始排列。</li><li><code>column-reverse</code>：主轴和column一样垂直方向，起点改为相反方向，从下到上排列。</li></ul><p><strong>兼容性：</strong><br><img src="/2019/12/16/CSS3/flex/flex-direction-caniuse.png" alt="image"><br><a href="https://caniuse.com/#search=flex-direction" rel="external nofollow noopener noreferrer" target="_blank">查看兼容性详情</a></p><p>查看案例 <a href="https://codepen.io/qwguo88/pen/abbqyVY" rel="external nofollow noopener noreferrer" target="_blank">Demo</a></p><iframe height="500" style="width: 100%;" scrolling="no" title="flex-direction" src="https://codepen.io/qwguo88/embed/abbqyVY?height=300&theme-id=30742&default-tab=result" frameborder="no" allowtransparency="true" allowfullscreen="true"><br>  See the Pen <a href="https://codepen.io/qwguo88/pen/abbqyVY" rel="external nofollow noopener noreferrer" target="_blank">flex-direction</a> by qwguo<br>  (<a href="https://codepen.io/qwguo88" rel="external nofollow noopener noreferrer" target="_blank">@qwguo88</a>) on <a href="https://codepen.io" rel="external nofollow noopener noreferrer" target="_blank">CodePen</a>.<br></iframe><h4 id="flex-wrap"><a href="#flex-wrap" class="headerlink" title="flex-wrap"></a>flex-wrap</h4><blockquote><p><code>flex-wrap</code>：属性定义容器中的子项目如果在一条轴线上排不下时如何显示。默认情况下，项目都排在一条线（又称”轴线”）上。</p></blockquote><p><strong>语法：</strong><br><code>flex-wrap: nowrap | wrap | wrap-reverse</code></p><ul><li><code>nowrap</code>：默认值，不换行，容器中的子项目强制在一条轴上显示，容器内的子元素会溢出显示。</li><li><code>wrap</code>：强制换行，当子项目排列超出容器后会自动换到下一行（<em>默认</em>）或者下一列，取决于flex-direction的设置。</li><li><code>wrap-reverse</code>：和 wrap 的行为一样强制换行，但是排列会从下开始往上排列换行，或者从右开始向左排列换行。</li></ul><p><strong>兼容性：</strong><br><img src="/2019/12/16/CSS3/flex/flex-wrap-caniuse.png" alt="image"><br><a href="https://caniuse.com/#search=flex-wrap" rel="external nofollow noopener noreferrer" target="_blank">查看兼容性详情</a></p><p>查看案例 <a href="https://codepen.io/qwguo88/pen/dyydwLr" rel="external nofollow noopener noreferrer" target="_blank">Demo</a></p><iframe height="500" style="width: 100%;" scrolling="no" title="flex-wrap" src="https://codepen.io/qwguo88/embed/dyydwLr?height=300&theme-id=30742&default-tab=result" frameborder="no" allowtransparency="true" allowfullscreen="true"><br>  See the Pen <a href="https://codepen.io/qwguo88/pen/dyydwLr" rel="external nofollow noopener noreferrer" target="_blank">flex-wrap</a> by qwguo<br>  (<a href="https://codepen.io/qwguo88" rel="external nofollow noopener noreferrer" target="_blank">@qwguo88</a>) on <a href="https://codepen.io" rel="external nofollow noopener noreferrer" target="_blank">CodePen</a>.<br></iframe><h4 id="flex-flow"><a href="#flex-flow" class="headerlink" title="flex-flow"></a>flex-flow</h4><blockquote><p><code>flex-flow</code>：属性是<code>flex-direction</code> 和 <code>flow-wrap</code> 的简写形式，字面上理解就是flex容器中字项目的流向。</p></blockquote><p><strong>语法：</strong><br><code>flex-flow: &lt;&#39;flex-direction&#39;&gt; || &lt;&#39;flex-wrap&#39;&gt;;</code></p><p><strong>兼容性：</strong><br><img src="/2019/12/16/CSS3/flex/flex-flow-caniuse.png" alt="image"><br><a href="https://caniuse.com/#search=flex-flow" rel="external nofollow noopener noreferrer" target="_blank">查看兼容性详情</a></p><p>查看案例<a href="https://codepen.io/qwguo88/pen/KKKQYBN" rel="external nofollow noopener noreferrer" target="_blank">Demo</a></p><iframe height="500" style="width: 100%;" scrolling="no" title="flex-flow" src="https://codepen.io/qwguo88/embed/KKKQYBN?height=300&theme-id=30742&default-tab=result" frameborder="no" allowtransparency="true" allowfullscreen="true"><br>  See the Pen <a href="https://codepen.io/qwguo88/pen/KKKQYBN" rel="external nofollow noopener noreferrer" target="_blank">flex-flow</a> by qwguo<br>  (<a href="https://codepen.io/qwguo88" rel="external nofollow noopener noreferrer" target="_blank">@qwguo88</a>) on <a href="https://codepen.io" rel="external nofollow noopener noreferrer" target="_blank">CodePen</a>.<br></iframe><h4 id="justify-content"><a href="#justify-content" class="headerlink" title="justify-content"></a>justify-content</h4><blockquote><p><code>justify-content</code>：属性定义容器中的子项目在主轴线上的对齐方式</p></blockquote><p><strong>语法：</strong><br><code>justify-content: flex-start | flex-end | center | space-between | space-around | space-evenly;</code></p><ul><li><code>flex-start</code>：默认值、弹性容器的子项目将以行或列的起始位置对齐；</li><li><code>flex-end</code>：弹性容器的子项目将以行或列的结束位置对齐；</li><li><code>center</code>：弹性容器的子项目将居中对齐；</li><li><code>space-between</code>：弹性容器的子项目将平局分布对齐，每个子项之间间距相同，首尾子项将贴近容器边缘；</li><li><code>space-around</code>：弹性容器的子项目将平局分布对齐，首尾子项将不贴近容器边缘，每个子项的左右或上下边距相同；</li><li><code>space-evenly</code>：弹性容器的子项目将平局分布对齐，首尾子项将不贴近容器边缘，首尾子项贴近容器的间距和子项之间的间距相同；</li></ul><p><strong>兼容性：</strong><br><img src="/2019/12/16/CSS3/flex/justify-content-caniuse.png" alt="image"><br><a href="https://caniuse.com/#feat=mdn-css_properties_justify-content_flex_context" rel="external nofollow noopener noreferrer" target="_blank">查看兼容性详情</a></p><p>查看案例<a href="https://codepen.io/qwguo88/pen/LYYQoop" rel="external nofollow noopener noreferrer" target="_blank">Demo</a></p><iframe height="500" style="width: 100%;" scrolling="no" title="justify-content" src="https://codepen.io/qwguo88/embed/LYYQoop?height=300&theme-id=30742&default-tab=result" frameborder="no" allowtransparency="true" allowfullscreen="true"><br>  See the Pen <a href="https://codepen.io/qwguo88/pen/LYYQoop" rel="external nofollow noopener noreferrer" target="_blank">justify-content</a> by qwguo<br>  (<a href="https://codepen.io/qwguo88" rel="external nofollow noopener noreferrer" target="_blank">@qwguo88</a>) on <a href="https://codepen.io" rel="external nofollow noopener noreferrer" target="_blank">CodePen</a>.<br></iframe><h4 id="align-items"><a href="#align-items" class="headerlink" title="align-items"></a>align-items</h4><blockquote><p><code>align-items</code>：属性设置弹性容器中的子项目在侧轴（纵轴 | 副轴）方向上的对齐方式</p></blockquote><p><strong>语法：</strong><br><code>align-items: flex-start | flex-end | center | baseline | stretch;</code></p><ul><li><code>flex-start</code>：弹性容器的子项目以侧轴的起始位置对齐</li><li><code>flex-end</code>：弹性容器的子项目以侧轴的结束位置对齐</li><li><code>center</code>：弹性容器的子项目以侧轴的中点对齐</li><li><code>baseline</code>：弹性容器的子项目以项目的第一行文字的基线对齐</li><li><code>stretch</code>：默认值，弹性容器的子项目如果不设置高度或者高度是auto，那么子项目将占满整个容器的高度</li></ul><p><strong>兼容性：</strong><br><img src="/2019/12/16/CSS3/flex/flex-align-items-caniuse.png" alt="image"><br><a href="https://caniuse.com/#feat=mdn-css_properties_align-items_flex_context" rel="external nofollow noopener noreferrer" target="_blank">查看兼容性详情</a></p><p>查看案例<a href="https://codepen.io/qwguo88/pen/NWWMjPG" rel="external nofollow noopener noreferrer" target="_blank">Demo</a></p><iframe height="500" style="width: 100%;" scrolling="no" title="align-items" src="https://codepen.io/qwguo88/embed/NWWMjPG?height=300&theme-id=30742&default-tab=result" frameborder="no" allowtransparency="true" allowfullscreen="true"><br>  See the Pen <a href="https://codepen.io/qwguo88/pen/NWWMjPG" rel="external nofollow noopener noreferrer" target="_blank">align-items</a> by qwguo<br>  (<a href="https://codepen.io/qwguo88" rel="external nofollow noopener noreferrer" target="_blank">@qwguo88</a>) on <a href="https://codepen.io" rel="external nofollow noopener noreferrer" target="_blank">CodePen</a>.<br></iframe><h4 id="6、align-content"><a href="#6、align-content" class="headerlink" title="6、align-content"></a>6、align-content</h4><blockquote><p><code>align-content</code>：属性定义了弹性容器中多根轴线的对齐方式。如果项目只有一根轴线或（设置了flex-wrap-nowrap属性的弹性容器）将不起作用，也可以理解为子项目整体的对齐方式，会把子项目划分成一个组。</p></blockquote><p><strong>语法：</strong><br><code>align-content: flex-start | flex-end | center | space-between | space-around | stretch;</code></p><ul><li><code>flex-start</code>：弹性容器的子项目以主轴的起始位置对齐</li><li><code>flex-end</code>：弹性容器的子项目以主轴的结束位置对齐</li><li><code>center</code>：弹性容器的子项目以主轴的中点对齐</li><li><code>space-between</code>：弹性容器的子项目以容器的两端对齐</li><li><code>space-around</code>：弹性容器的子项目平均分配容器的空间子项目间上下（或左右）间距相同</li><li><code>stretch</code>：默认值，弹性容器的子项目如果不设置高度或者高度是auto，那么子项目将拉伸平均占满整个容器的高度活宽度</li></ul><p><strong>兼容性：</strong><br><img src="/2019/12/16/CSS3/flex/flex-align-content-caniuse.png" alt="image"><br><a href="https://caniuse.com/#feat=mdn-css_properties_align-content_flex_context" rel="external nofollow noopener noreferrer" target="_blank">查看兼容性详情</a></p><p>查看案例<a href="https://codepen.io/qwguo88/pen/ExxLoGv" rel="external nofollow noopener noreferrer" target="_blank">Demo</a></p><iframe height="500" style="width: 100%;" scrolling="no" title="align-centent" src="https://codepen.io/qwguo88/embed/ExxLoGv?height=300&theme-id=30742&default-tab=result" frameborder="no" allowtransparency="true" allowfullscreen="true"><br>  See the Pen <a href="https://codepen.io/qwguo88/pen/ExxLoGv" rel="external nofollow noopener noreferrer" target="_blank">align-centent</a> by qwguo<br>  (<a href="https://codepen.io/qwguo88" rel="external nofollow noopener noreferrer" target="_blank">@qwguo88</a>) on <a href="https://codepen.io" rel="external nofollow noopener noreferrer" target="_blank">CodePen</a>.<br></iframe><h3 id="弹性容器中的子项目的属性："><a href="#弹性容器中的子项目的属性：" class="headerlink" title="弹性容器中的子项目的属性："></a>弹性容器中的子项目的属性：</h3><h4 id="flex-grow"><a href="#flex-grow" class="headerlink" title="flex-grow"></a>flex-grow</h4><blockquote><p><code>flex-grow</code>：属性设置弹性容器的子项是否拉伸填充容器的剩余空间</p></blockquote><p><strong>语法：</strong><br><code>flex-grow: number | 0</code></p><ul><li><code>0</code>：初始化值，表示不进行拉伸处理。</li><li><code>number</code>：只能取正整数。当容器中的子项目填充不满容器的时候，每个子项目将按照自身设置的<code>flew-grow:number</code>值来放大填充满剩余的空间。<ul><li>假设容器的宽度为400px, 子项1的占用的基础空间(flex-basis)为50px，子项2占用的基础空间是70px，子项3占用基础空间是100px，剩余空间为 400-50-70-100 = 180px。 其中子项1的flex-grow: 0(未设置默认为0)， 子项2flex-grow: 2，子项3flex-grow: 1，剩余空间分成3份，子项2占2份(120px)，子项3占1份(60px)。所以 子项1真实的占用空间为: 50+0 = 50px， 子项2真实的占用空间为: 70+120 = 190px， 子项3真实的占用空间为: 100+60 = 160px。</li></ul></li></ul><p><strong>兼容性：</strong><br><img src="/2019/12/16/CSS3/flex/flex-grow-caniuse.png" alt="image"><br><a href="https://caniuse.com/#search=flex-grow" rel="external nofollow noopener noreferrer" target="_blank">查看兼容详情</a></p><p>查看案例<a href="https://codepen.io/qwguo88/pen/xxxjJZo" rel="external nofollow noopener noreferrer" target="_blank">Demo</a></p><iframe height="500" style="width: 100%;" scrolling="no" title="flex-grow" src="https://codepen.io/qwguo88/embed/xxxjJZo?height=300&theme-id=30742&default-tab=result" frameborder="no" allowtransparency="true" allowfullscreen="true"><br>  See the Pen <a href="https://codepen.io/qwguo88/pen/xxxjJZo" rel="external nofollow noopener noreferrer" target="_blank">flex-grow</a> by qwguo<br>  (<a href="https://codepen.io/qwguo88" rel="external nofollow noopener noreferrer" target="_blank">@qwguo88</a>) on <a href="https://codepen.io" rel="external nofollow noopener noreferrer" target="_blank">CodePen</a>.<br></iframe><h4 id="flex-shrink"><a href="#flex-shrink" class="headerlink" title="flex-shrink"></a>flex-shrink</h4><blockquote><p><code>flex-shrink</code>：属性设置弹性容器的子项目在所有子项宽度之和大于容器总宽度是是否收缩。</p></blockquote><p><strong>语法：</strong><br><code>flew-shrink: number | 1</code></p><ul><li><code>1</code>：初始化值，表示每个子项目都进行缩放。</li><li><code>number</code>： 取值==0==表示不进行缩放，取值其他正整数表示进行缩放。具体计算规则是：</li></ul><pre><code class="html">&lt;div class=&quot;box&quot;&gt;  &lt;div class=&quot;sub-1&quot;&gt;11111&lt;/div&gt;  &lt;div class=&quot;sub-2&quot;&gt;2&lt;/div&gt;  &lt;div class=&quot;sub-3&quot;&gt;3&lt;/div&gt;&lt;/div&gt;</code></pre><pre><code class="less">.box{  display: flex;  width: 500px;  height: 200px;  .sub-1{    width: 100px;    flex-shrink: 1;  }  .sub-2{    width: 200px;    flex-shrink: 2;  }  .sub-3{    width: 300px;    flex-shrink: 3;  }}</code></pre><blockquote><p>先计算总权重TW = 100px <em> 1(flex-shrink) + 200px </em>2(flex-shrink) + 300px *3(flex-shrink) = 1400px 也就是每个div的宽度乘以flex-shrink系数的总和。</p></blockquote><blockquote><p>每个div收缩的空间为：div的宽度 - div的宽度 <em> flex-shrink系数/ 总权重TW </em> 需要收缩的总宽度（在我们的例子中是600px - 500px = 100px）</p></blockquote><p><strong>兼容性：</strong><br><img src="/2019/12/16/CSS3/flex/flex-shrink-caniuse.png" alt="image"><br><a href="https://caniuse.com/#search=flex-shrink" rel="external nofollow noopener noreferrer" target="_blank">查看兼容详情</a></p><p>查看案例<a href="https://codepen.io/qwguo88/pen/vYYrEmp" rel="external nofollow noopener noreferrer" target="_blank">Demo</a></p><iframe height="500" style="width: 100%;" scrolling="no" title="flex-shrink" src="https://codepen.io/qwguo88/embed/vYYrEmp?height=300&theme-id=30742&default-tab=result" frameborder="no" allowtransparency="true" allowfullscreen="true"><br>  See the Pen <a href="https://codepen.io/qwguo88/pen/vYYrEmp" rel="external nofollow noopener noreferrer" target="_blank">flex-shrink</a> by qwguo<br>  (<a href="https://codepen.io/qwguo88" rel="external nofollow noopener noreferrer" target="_blank">@qwguo88</a>) on <a href="https://codepen.io" rel="external nofollow noopener noreferrer" target="_blank">CodePen</a>.<br></iframe><h4 id="flex-basis"><a href="#flex-basis" class="headerlink" title="flex-basis"></a>flex-basis</h4><blockquote><p><code>flex-basis</code>：定义弹性容器的子项目在主轴方向上占容器的空间大小。<em>它要比<code>width</code>或者<code>height</code>权重高</em></p></blockquote><p><strong>语法：</strong><br><code>flex-basis: &lt;length&gt; | auto;</code></p><ul><li><code>length</code>：用于设置元素的宽度或者高度。</li><li><code>auto</code>：默认值，表示元素按照内容来分配宽度或高度。</li></ul><p><strong>兼容性：</strong><br><img src="/2019/12/16/CSS3/flex/flex-basis-caniuse.png" alt="image"><br><a href="https://caniuse.com/#search=flex-basis" rel="external nofollow noopener noreferrer" target="_blank">查看兼容详情</a></p><p>查看案例<a href="https://codepen.io/qwguo88/pen/NWWzemV" rel="external nofollow noopener noreferrer" target="_blank">Demo</a></p><iframe height="500" style="width: 100%;" scrolling="no" title="flex-basis" src="https://codepen.io/qwguo88/embed/NWWzemV?height=300&theme-id=30742&default-tab=result" frameborder="no" allowtransparency="true" allowfullscreen="true"><br>  See the Pen <a href="https://codepen.io/qwguo88/pen/NWWzemV" rel="external nofollow noopener noreferrer" target="_blank">flex-basis</a> by qwguo<br>  (<a href="https://codepen.io/qwguo88" rel="external nofollow noopener noreferrer" target="_blank">@qwguo88</a>) on <a href="https://codepen.io" rel="external nofollow noopener noreferrer" target="_blank">CodePen</a>.<br></iframe><h4 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h4><blockquote><p><code>flex</code>：属性规定了弹性元素如何伸长或缩短以适应flex容器中的可用空间，它是<code>flex-basis</code>、<code>flex-grow</code>、<code>flex-shrink</code>三个属性的简写形式。可以指定1个，2个或3个值</p></blockquote><p><strong>语法：</strong><br><code>flex: none | [ &lt;&#39;flex-grow&#39;&gt; &lt;&#39;flex-shrink&#39;&gt;? || &lt;&#39;flex-basis&#39;&gt; ];</code></p><ul><li><code>none</code>：元素会根据自身宽高来设置尺寸。它是完全非弹性的：既不会缩短，也不会伸长来适应 flex 容器。相当于将属性设置为<code>flex: 0 0 auto</code>。</li><li><strong>单值语法：</strong> 值必须为以下其中之一：<ul><li>一个无单位数(<number>): 它会被当作<flex-grow>的值。</flex-grow></number></li><li>一个有效的宽度(width)值: 它会被当作 <flex-basis>的值。</flex-basis></li><li>关键字none，auto或initial.</li></ul></li><li><strong>双值语法：</strong> 第一个值必须为一个无单位数，并且它会被当作 <flex-grow> 的值。第二个值必须为以下之一：<ul><li>一个无单位数：它会被当作 <flex-shrink> 的值。</flex-shrink></li><li>一个有效的宽度值: 它会被当作 <flex-basis> 的值。</flex-basis></li></ul></flex-grow></li><li><p><strong>三值语法：</strong></p><ul><li>第一个值必须为一个无单位数，并且它会被当作 <flex-grow> 的值。</flex-grow></li><li>第二个值必须为一个无单位数，并且它会被当作  <flex-shrink> 的值。</flex-shrink></li><li>第三个值必须为一个有效的宽度值， 并且它会被当作 <flex-basis> 的值。</flex-basis></li></ul></li><li><p><code>initial</code>：元素会根据自身宽高设置尺寸。它会缩短自身以适应 flex 容器，但不会伸长并吸收 flex 容器中的额外自由空间来适应 flex 容器 。相当于将属性设置为<code>flex: 0 1 auto</code>。</p></li><li><code>auto</code>：元素会根据自身的宽度与高度来确定尺寸，但是会伸长并吸收 flex 容器中额外的自由空间，也会缩短自身来适应 flex 容器。这相当于将属性设置为 <code>flex: 1 1 auto</code>.</li></ul><p><strong>兼容性：</strong><br><img src="/2019/12/16/CSS3/flex/flex-caniuse.png" alt="image"><br><a href="https://caniuse.com/#search=flex" rel="external nofollow noopener noreferrer" target="_blank">查看兼容详情</a></p><p>查看案例<a href="https://codepen.io/qwguo88/pen/JjjBpWO" rel="external nofollow noopener noreferrer" target="_blank">Demo</a></p><iframe height="500" style="width: 100%;" scrolling="no" title="flex" src="https://codepen.io/qwguo88/embed/JjjBpWO?height=300&theme-id=30742&default-tab=result" frameborder="no" allowtransparency="true" allowfullscreen="true"><br>  See the Pen <a href="https://codepen.io/qwguo88/pen/JjjBpWO" rel="external nofollow noopener noreferrer" target="_blank">flex</a> by qwguo<br>  (<a href="https://codepen.io/qwguo88" rel="external nofollow noopener noreferrer" target="_blank">@qwguo88</a>) on <a href="https://codepen.io" rel="external nofollow noopener noreferrer" target="_blank">CodePen</a>.<br></iframe><h4 id="order"><a href="#order" class="headerlink" title="order"></a>order</h4><blockquote><p><code>order</code>：属性定义弹性容器的子项目在显示中的排列顺序，数值越小越靠前，默认值为0。如果两个子项目的 <code>order</code> 值相同那么就按照他们的代码出现结构排序。</p></blockquote><p><strong>语法：</strong><br><code>order: integer;</code></p><ul><li><code>integer</code>：取整数，可以取负数、0、正数。</li></ul><p><strong>兼容性：</strong><br><img src="/2019/12/16/CSS3/flex/flex-order-caniuse.png" alt="image"><br><a href="https://caniuse.com/#feat=mdn-css_properties_order" rel="external nofollow noopener noreferrer" target="_blank">查看兼容详情</a></p><p>查看案例<a href="https://codepen.io/qwguo88/pen/rNNrbxb" rel="external nofollow noopener noreferrer" target="_blank">Demo</a></p><iframe height="500" style="width: 100%;" scrolling="no" title="order" src="https://codepen.io/qwguo88/embed/rNNrbxb?height=300&theme-id=30742&default-tab=result" frameborder="no" allowtransparency="true" allowfullscreen="true"><br>  See the Pen <a href="https://codepen.io/qwguo88/pen/rNNrbxb" rel="external nofollow noopener noreferrer" target="_blank">order</a> by qwguo<br>  (<a href="https://codepen.io/qwguo88" rel="external nofollow noopener noreferrer" target="_blank">@qwguo88</a>) on <a href="https://codepen.io" rel="external nofollow noopener noreferrer" target="_blank">CodePen</a>.<br></iframe><h4 id="align-self"><a href="#align-self" class="headerlink" title="align-self"></a>align-self</h4><blockquote><p><code>align-self</code>：属性可以对弹性容器中的单个子项目进行设置对齐方式，并且覆盖容器中设置的<code>align-items</code>值。</p></blockquote><p><strong>语法：</strong><br><code>align-self: auto | flex-start | flex-end | center | baseline | stretch | inherit</code></p><ul><li><code>auto</code>：按照父元素的 <code>align-items</code> 值对齐，如果该元素没有父元素的话，就设置为 stretch。</li><li><code>flex-start</code>：按照弹性容器的主轴的开始位置对齐。</li><li><code>flex-end</code>：按照弹性容器的主轴结束位置对齐。</li><li><code>center</code>：按照弹性容器的主轴中间对齐。</li><li><code>baseline</code>：按照弹性容器中项目的第一行文字的基线对齐。</li><li><code>stretch</code>：按照弹性容器的宽或者高进行拉伸。</li><li><code>inherit</code>：继承父容器的 <code>align-items</code>对齐方式。</li></ul><p><strong>兼容性：</strong><br><img src="/2019/12/16/CSS3/flex/flex-align-self-caniuse.png" alt="image"><br><a href="https://caniuse.com/#feat=mdn-css_properties_align-self_flex_context" rel="external nofollow noopener noreferrer" target="_blank">查看兼容详情</a></p><p>查看案例<a href="https://codepen.io/qwguo88/pen/GRRXxQg" rel="external nofollow noopener noreferrer" target="_blank">Demo</a></p><iframe height="500" style="width: 100%;" scrolling="no" title="align-self" src="https://codepen.io/qwguo88/embed/GRRXxQg?height=300&theme-id=30742&default-tab=result" frameborder="no" allowtransparency="true" allowfullscreen="true"><br>  See the Pen <a href="https://codepen.io/qwguo88/pen/GRRXxQg" rel="external nofollow noopener noreferrer" target="_blank">align-self</a> by qwguo<br>  (<a href="https://codepen.io/qwguo88" rel="external nofollow noopener noreferrer" target="_blank">@qwguo88</a>) on <a href="https://codepen.io" rel="external nofollow noopener noreferrer" target="_blank">CodePen</a>.<br></iframe>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
          <category> CSS3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS3 </tag>
            
            <tag> flex </tag>
            
            <tag> 弹性布局 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>columns多列属性</title>
      <link href="/2019/12/13/CSS3/columns/"/>
      <url>/2019/12/13/CSS3/columns/</url>
      
        <content type="html"><![CDATA[<h1 id="columns样式属性使用"><a href="#columns样式属性使用" class="headerlink" title="columns样式属性使用"></a>columns样式属性使用</h1><blockquote><p><code>columns</code>：用于设置元素的列宽和列数。它是<code>column-width</code>和<code>column-count</code>的简写属性。</p></blockquote><p><strong>语法：</strong><br> <code>columns: &lt;&#39;column-width&#39;&gt; || &lt;&#39;column-count&#39;&gt;;</code></p><ul><li><code>column-width</code>：用来设置列宽，取值<code>auto</code>和<code>像素值</code>，实际宽度可能会更宽或更窄以适合可用空间。</li><li><code>column-count</code>：用来设置元素内容被划分成几列，取值<code>auto</code>和<code>正整数</code>。如果取值和列的宽度都非<code>auto</code> ，则它仅指示允许的最大列数。</li></ul><a id="more"></a><p><strong>兼容性：</strong></p><p><img src="/2019/12/13/CSS3/columns/columns-caniuse.png" alt="image"><br><a href="https://caniuse.com/#search=columns" rel="external nofollow noopener noreferrer" target="_blank">查看兼容性详情</a></p><iframe height="400" style="width: 100%;" scrolling="no" title="columns" src="https://codepen.io/qwguo88/embed/jOOagVB?height=400&theme-id=default&default-tab=result" frameborder="no" allowtransparency="true" allowfullscreen="true"><br>  See the Pen <a href="https://codepen.io/qwguo88/pen/jOOagVB" rel="external nofollow noopener noreferrer" target="_blank">columns</a> by qwguo<br>  (<a href="https://codepen.io/qwguo88" rel="external nofollow noopener noreferrer" target="_blank">@qwguo88</a>) on <a href="https://codepen.io" rel="external nofollow noopener noreferrer" target="_blank">CodePen</a>.<br></iframe><h3 id="column-width样式属性使用"><a href="#column-width样式属性使用" class="headerlink" title="column-width样式属性使用"></a>column-width样式属性使用</h3><blockquote><p><code>column-width</code>：用于单独设置元素的列宽。</p></blockquote><p><strong>语法：</strong><br><code>column-width: auto | length;</code></p><ul><li><code>auto</code>：默认值，由浏览器决定宽度。</li><li><code>length</code>：单位值，用来这只每一列的宽度，当设置了<code>column-count</code>的时候优先把内容划分指定列数，宽度将自适应。</li></ul><p><strong>兼容性：</strong></p><p><img src="/2019/12/13/CSS3/columns/column-width-caniuse.png" alt="image"><br><a href="https://caniuse.com/#search=column-width" rel="external nofollow noopener noreferrer" target="_blank">查看兼容性详情</a></p><p>查看案例 <a href="https://codepen.io/qwguo88/pen/poodMNw" rel="external nofollow noopener noreferrer" target="_blank">Demo</a></p><iframe height="500" style="width: 100%;" scrolling="no" title="column-width" src="https://codepen.io/qwguo88/embed/poodMNw?height=300&theme-id=30742&default-tab=result" frameborder="no" allowtransparency="true" allowfullscreen="true"><br>  See the Pen <a href="https://codepen.io/qwguo88/pen/poodMNw" rel="external nofollow noopener noreferrer" target="_blank">column-width</a> by qwguo<br>  (<a href="https://codepen.io/qwguo88" rel="external nofollow noopener noreferrer" target="_blank">@qwguo88</a>) on <a href="https://codepen.io" rel="external nofollow noopener noreferrer" target="_blank">CodePen</a>.<br></iframe><h3 id="column-count样式属性使用"><a href="#column-count样式属性使用" class="headerlink" title="column-count样式属性使用"></a>column-count样式属性使用</h3><blockquote><p><code>column-count</code>：用于单独设置元素的列数。</p></blockquote><p><strong>语法：</strong><br><code>column-count: auto | number;</code></p><ul><li><code>auto</code>：默认值，由其他属性决定列数，比如 <code>column-width</code>，当<code>column-width</code>设置后会根据元素的总宽度和<code>column-width</code>的值来自动划分列数。</li><li><code>number</code>：划分元素以多少列来显示内容。</li></ul><p><strong>兼容性：</strong></p><p><img src="/2019/12/13/CSS3/columns/column-count-caniuse.png" alt="image"><br><a href="https://caniuse.com/#search=column-width" rel="external nofollow noopener noreferrer" target="_blank">查看兼容性详情</a></p><p>查看案例 <a href="https://codepen.io/qwguo88/pen/poodMNw" rel="external nofollow noopener noreferrer" target="_blank">Demo</a></p><iframe height="500" style="width: 100%;" scrolling="no" title="column-width" src="https://codepen.io/qwguo88/embed/poodMNw?height=300&theme-id=30742&default-tab=result" frameborder="no" allowtransparency="true" allowfullscreen="true"><br>  See the Pen <a href="https://codepen.io/qwguo88/pen/poodMNw" rel="external nofollow noopener noreferrer" target="_blank">column-width</a> by qwguo<br>  (<a href="https://codepen.io/qwguo88" rel="external nofollow noopener noreferrer" target="_blank">@qwguo88</a>) on <a href="https://codepen.io" rel="external nofollow noopener noreferrer" target="_blank">CodePen</a>.<br></iframe><h2 id="column-gap样式属性使用"><a href="#column-gap样式属性使用" class="headerlink" title="column-gap样式属性使用"></a>column-gap样式属性使用</h2><blockquote><p><code>column-gap</code>：用于设置每一列之间的间隔</p></blockquote><p><strong>语法：</strong><br><code>column-gap: length | normal;</code></p><ul><li><code>length</code>：设置列间的间隔为指定的长度。</li><li><code>normal</code>：规定列间间隔为一个常规的间隔。W3C 建议的值是 1em。</li></ul><p><strong>兼容性：</strong><br><img src="/2019/12/13/CSS3/columns/column-gap-caniuse.png" alt="image"><br><a href="https://caniuse.com/#feat=mdn-css_properties_column-gap_multicol_context" rel="external nofollow noopener noreferrer" target="_blank">查看兼容性详情</a></p><p>查看案例 <a href="https://codepen.io/qwguo88/pen/wvvpNmp" rel="external nofollow noopener noreferrer" target="_blank">Demo</a></p><iframe height="500" style="width: 100%;" scrolling="no" title="column-gap" src="https://codepen.io/qwguo88/embed/wvvpNmp?height=300&theme-id=30742&default-tab=result" frameborder="no" allowtransparency="true" allowfullscreen="true"><br>  See the Pen <a href="https://codepen.io/qwguo88/pen/wvvpNmp" rel="external nofollow noopener noreferrer" target="_blank">column-gap</a> by qwguo<br>  (<a href="https://codepen.io/qwguo88" rel="external nofollow noopener noreferrer" target="_blank">@qwguo88</a>) on <a href="https://codepen.io" rel="external nofollow noopener noreferrer" target="_blank">CodePen</a>.<br></iframe><h2 id="column-span样式属性使用"><a href="#column-span样式属性使用" class="headerlink" title="column-span样式属性使用"></a>column-span样式属性使用</h2><blockquote><p><code>column-span</code>：用于设置元素中的子元素横向跨越的列数</p></blockquote><p><strong>语法：</strong><br><code>column-span: 1 | all;</code></p><ul><li><code>1</code>：设置元素横跨一列，默认值。</li><li><code>all</code>：设置元素横跨所有列，也就是单独占一行显示。</li></ul><p><strong>兼容性：</strong><br><img src="/2019/12/13/CSS3/columns/column-span-caniuse.png" alt="image"><br><a href="https://caniuse.com/#search=column-span" rel="external nofollow noopener noreferrer" target="_blank">查看兼容性详情</a></p><p>查看案例 <a href="https://codepen.io/qwguo88/pen/GRRQZQW" rel="external nofollow noopener noreferrer" target="_blank">Demo</a></p><iframe height="500" style="width: 100%;" scrolling="no" title="column-span" src="https://codepen.io/qwguo88/embed/GRRQZQW?height=300&theme-id=30742&default-tab=result" frameborder="no" allowtransparency="true" allowfullscreen="true"><br>  See the Pen <a href="https://codepen.io/qwguo88/pen/GRRQZQW" rel="external nofollow noopener noreferrer" target="_blank">column-span</a> by qwguo<br>  (<a href="https://codepen.io/qwguo88" rel="external nofollow noopener noreferrer" target="_blank">@qwguo88</a>) on <a href="https://codepen.io" rel="external nofollow noopener noreferrer" target="_blank">CodePen</a>.<br></iframe><h2 id="column-rule样式属性使用"><a href="#column-rule样式属性使用" class="headerlink" title="column-rule样式属性使用"></a>column-rule样式属性使用</h2><blockquote><p><code>column-rule</code>：字面意思是设置多列规则，它是一个简写属性，用于整体设置所有 <code>column-rule-*</code> 的规则属性，规定列之间的==宽度==、==样式==和==颜色==规则，此属性类似于设置边框。</p></blockquote><p><strong>语法：</strong><br><code>column-rule: width | style | color</code></p><ul><li><p><code>width</code>：规定列之间的宽度规则，非简写：<code>column-rule-width</code></p><ul><li>取值：<code>thin | medium | thick | length</code>;<ul><li><code>thin</code>：很细</li><li><code>medium</code>：中等</li><li><code>thick</code>：宽厚</li><li><code>length</code>：自定义单位值</li></ul></li></ul></li><li><p><code>style</code>：规定列之间的样式规则，非简写：<code>column-rule-style</code></p><ul><li>取值：<code>none | hidden | dotted | dashed | solid | double | groove | ridge | inset | outset</code>;<ul><li><code>none</code>：无规则</li><li><code>hidden</code>：隐藏</li><li><code>dotted</code>：点线效果</li><li><code>dashed</code>：虚线效果</li><li><code>solid</code>：实线效果</li><li><code>double</code>：双线效果</li><li><code>groove</code>：定义3D凹槽效果。该效果取决于宽度和颜色值。</li><li><code>ridge</code>：定义3D凸起效果。该效果取决于宽度和颜色值。</li><li><code>inset</code>：定义3D内显示效果。该效果取决于宽度和颜色值。</li><li><code>outset</code>：定义3D外显示效果。该效果取决于宽度和颜色值。</li></ul></li></ul></li><li><p><code>color</code>：规定列之间的颜色规则，非简写：<code>column-rule-color</code></p><ul><li>取值：<code>color</code> 颜色值;</li></ul></li></ul><p><strong>兼容性：</strong></p><p><img src="/2019/12/13/CSS3/columns/column-rule-caniuse.png" alt="image"><br><a href="https://caniuse.com/#search=column-rule" rel="external nofollow noopener noreferrer" target="_blank">查看兼容性详情</a></p><p>查看案例 <a href="https://codepen.io/qwguo88/pen/jOOZrwo" rel="external nofollow noopener noreferrer" target="_blank">Demo</a></p><iframe height="500" style="width: 100%;" scrolling="no" title="column-rule" src="https://codepen.io/qwguo88/embed/jOOZrwo?height=300&theme-id=30742&default-tab=result" frameborder="no" allowtransparency="true" allowfullscreen="true"><br>  See the Pen <a href="https://codepen.io/qwguo88/pen/jOOZrwo" rel="external nofollow noopener noreferrer" target="_blank">column-rule</a> by qwguo<br>  (<a href="https://codepen.io/qwguo88" rel="external nofollow noopener noreferrer" target="_blank">@qwguo88</a>) on <a href="https://codepen.io" rel="external nofollow noopener noreferrer" target="_blank">CodePen</a>.<br></iframe><h2 id="column-fill样式属性使用"><a href="#column-fill样式属性使用" class="headerlink" title="column-fill样式属性使用"></a>column-fill样式属性使用</h2><blockquote><p><code>column-fill</code>：规定如何填充列</p></blockquote><p><strong>语法：</strong><br><code>column-fill: balance | auto;</code></p><ul><li><code>balance</code>：对列进行协调。浏览器应对列长度的差异进行最小化处理。</li><li><code>auto</code>：按顺序对列进行填充，列长度会各有不同。</li></ul><p><strong>兼容性：</strong> 暂时无浏览器支持此属性，这里就不做讨论了。</p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
          <category> CSS3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS3 </tag>
            
            <tag> columns </tag>
            
            <tag> column-gap </tag>
            
            <tag> 布局 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Grid网格布局</title>
      <link href="/2019/07/20/CSS3/grid/"/>
      <url>/2019/07/20/CSS3/grid/</url>
      
        <content type="html"><![CDATA[<blockquote><h3 id="css3中的grid布局学习"><a href="#css3中的grid布局学习" class="headerlink" title="css3中的grid布局学习"></a>css3中的grid布局学习</h3></blockquote><p>Grid是CSS3中网格布局系统，也是最强大的布局系统。它是一个二维系统，这意味着它可以处理列和行，不像flexbox主要是一维系统。 您可以使用网格布局，通过将CSS规则应用于父元素（成为网格容器）和该元素的子元素（它们成为网格项）。</p><a id="more"></a><blockquote><h3 id="应用在父元素和子元素的Grid规则"><a href="#应用在父元素和子元素的Grid规则" class="headerlink" title="应用在父元素和子元素的Grid规则"></a>应用在父元素和子元素的Grid规则</h3></blockquote><table><thead><tr><th>作用在grid容器上</th><th>作用在grid子项上</th></tr></thead><tbody><tr><td>display</td><td>grid-column-start</td></tr><tr><td><a href="#grid-template-rows-grid-template-columns">grid-template-rows</a></td><td>grid-column-end</td></tr><tr><td><a href="#grid-template-rows-grid-template-columns">grid-template-columns</a></td><td>grid-row-start</td></tr><tr><td><a href="#grid-template-areas">grid-template-areas</a></td><td>grid-row-end</td></tr><tr><td><a href="#grid-template">grid-template</a></td><td>grid-column</td></tr><tr><td>grid-column-gap</td><td>grid-row</td></tr><tr><td>grid-row-gap</td><td>grid-area</td></tr><tr><td>grid-gap</td><td>justify-self</td></tr><tr><td>justify-items</td><td>align-self</td></tr><tr><td>align-items</td><td>place-self</td></tr><tr><td>place-items</td><td></td></tr><tr><td>justify-content</td><td></td></tr><tr><td>align-content</td><td></td></tr><tr><td>place-content</td><td></td></tr><tr><td>grid-auto-columns</td><td></td></tr><tr><td>grid-auto-rows</td><td></td></tr><tr><td>grid-auto-flow</td><td></td></tr><tr><td>grid</td><td></td></tr></tbody></table><p>如果想让一个块级元素成为网格布局，那么给该元素添加<code>display:grid</code>；</p><p>如果要想让一个内联元素成为网格布局，那么给钙元素添加<code>display:inline-grid</code>。</p><blockquote><h4 id="把元素变成Grid元素"><a href="#把元素变成Grid元素" class="headerlink" title="把元素变成Grid元素"></a>把元素变成Grid元素</h4></blockquote><p>代码如下：</p><pre><code class="html">  &lt;style type=&quot;text/css&quot;&gt;    .grid-box{      display: grid;    }  &lt;/style&gt;  &lt;div class=&quot;grid-box&quot;&gt;&lt;/div&gt;</code></pre><p>上边的代码中，div.grid-box元素现在就是一个网格布局元素。</p><blockquote><h4 id="grid-template-rows-grid-template-columns"><a href="#grid-template-rows-grid-template-columns" class="headerlink" title="grid-template-rows, grid-template-columns"></a>grid-template-rows, grid-template-columns</h4></blockquote><!-- <iframe height="420" style="width: 100%;" scrolling="no" title="grid-template-rows" src="//codepen.io/qwguo88/embed/voOdMK/?height=420&theme-id=30742&default-tab=css,result" frameborder="no" allowtransparency="true" allowfullscreen="true">  See the Pen <a href='https://codepen.io/qwguo88/pen/voOdMK/'>grid-template-rows</a> by qwguo  (<a href='https://codepen.io/qwguo88'>@qwguo88</a>) on <a href='https://codepen.io'>CodePen</a>.</iframe> --><p>从上面可以看到，通过设置<code>grid-template-rows: 50px auto 1fr;</code>把Grid元素中的子元素划分成了三行，并且给每一行分别设置高度值。</p><p>具体语法是：<code>&lt;track-size&gt; ... | &lt;line-name&gt; &lt;track-size&gt; ...;</code>;</p><ol><li><code>track-size1</code>：划分子元素的尺寸。可以是长度值，百分比值，以及fr单位（网格剩余空间比例单位）。</li><li><code>[line-name]</code>：对划分网格分隔线进行命名，语法是使用[]包裹我们自定义的命名，可以是中文，如果是两个值情况下用空格分开。</li></ol><blockquote><h4 id="grid-template-areas"><a href="#grid-template-areas" class="headerlink" title="grid-template-areas"></a>grid-template-areas</h4></blockquote><p>通过字面理解area是区域的意思，这个属性的作用是给父元素（网格元素）划分区域。</p><!-- <iframe height="420" style="width: 100%;" scrolling="no" title="grid-template-areas" src="//codepen.io/qwguo88/embed/ZgBXoE/?height=420&theme-id=30742&default-tab=css,result" frameborder="no" allowtransparency="true" allowfullscreen="true">  See the Pen <a href='https://codepen.io/qwguo88/pen/ZgBXoE/'>grid-template-areas</a> by qwguo  (<a href='https://codepen.io/qwguo88'>@qwguo88</a>) on <a href='https://codepen.io'>CodePen</a>.</iframe> --><pre>网格元素{  grid-template-areas:    "<grid-area-name> | . | none | ..."    "...";}子元素{  grid-area: grid-area-name;}</grid-area-name></pre><ol><li><code>grid-area-name</code>：表示网格区域的名称，可以是中文，可以是英文</li><li><code>.</code>：表示空的单元格</li><li><code>none</code>： 表示没有定义网格区域</li></ol><p>我们给定了网格区域名称以后，可以通过给子元素（网格单元格）设置<code>grid-area:a</code>进行设置，属性名不用使用引号。</p><p><strong>注意：</strong>如果我们给网格区域命了名，但是没有给网格线命名，则会自动根据网格区域名称生成网格线名称，规则是区域名称后面加-start和-end。例如，某网格区域名称是<code>&#39;a&#39;</code>，则左侧column线名称就是<code>&#39;a-start&#39;</code>，左侧column线名称就是<code>&#39;a-end&#39;</code>。我们的网格区域一定要形成规整的矩形区域，什么L形，凹的或凸的形状都是不支持的，会认为是无效的属性值。</p><blockquote><h4 id="grid-template"><a href="#grid-template" class="headerlink" title="grid-template"></a>grid-template</h4></blockquote><p><code>grid-template</code>是<code>grid-template-row</code>、<code>grid-template-column</code>、<code>grid-template-area</code>的简写形式1</p>]]></content>
      
      
      
        <tags>
            
            <tag> CSS3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ScrollifyJs</title>
      <link href="/2019/02/14/ScrollifyJs/"/>
      <url>/2019/02/14/ScrollifyJs/</url>
      
        <content type="html"><![CDATA[<h2 id="jQuery-Scrollify"><a href="#jQuery-Scrollify" class="headerlink" title="jQuery Scrollify"></a>jQuery Scrollify</h2><p>是一个jQuery插件，他可以实现整屏滚动。</p><table><thead><tr><th>参数</th><th style="text-align:center">说明</th><th style="text-align:center">默认值</th></tr></thead><tbody><tr><td>host</td><td style="text-align:center">远程主机的地址</td><td style="text-align:center"></td></tr><tr><td>user</td><td style="text-align:center">使用者名称</td><td style="text-align:center"></td></tr><tr><td>root</td><td style="text-align:center">远程主机的根目录</td><td style="text-align:center"></td></tr><tr><td>port</td><td style="text-align:center">端口</td><td style="text-align:center">22</td></tr><tr><td>delete</td><td style="text-align:center">删除远程主机上的旧文件</td><td style="text-align:center">true</td></tr><tr><td>verbose</td><td style="text-align:center">显示调试信息</td><td style="text-align:center">true</td></tr><tr><td>ignore_errors</td><td style="text-align:center">忽略错误</td><td style="text-align:center">false</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> Jquery </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
